{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyN7QuoGjUpQ0dGXXhGUq2NU"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":812},"id":"rllW1Nu6BjHq","executionInfo":{"status":"ok","timestamp":1747548884303,"user_tz":-480,"elapsed":40187,"user":{"displayName":"Tingting Du","userId":"01262363838823204487"}},"outputId":"84efe72e-7f3f-408e-b2eb-e64deb948374"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n","\u001b[38;5;2m✔ Download and installation successful\u001b[0m\n","You can now load the package via spacy.load('en_core_web_sm')\n","\u001b[38;5;3m⚠ Restart to reload dependencies\u001b[0m\n","If you are in a Jupyter or Colab notebook, you may need to restart Python in\n","order to load all the package's dependencies. You can do this by selecting the\n","'Restart kernel' or 'Restart runtime' option.\n"]},{"output_type":"display_data","data":{"text/plain":["     QuestionID            Mode   Sampling Step             Cluster  Avg_Prob  \\\n","0          q_10  wrong_sampling  sampling2    1      Entity:ORDINAL  0.586523   \n","1          q_10  wrong_sampling  sampling2    1    LogicalConnector  0.966046   \n","2          q_10  wrong_sampling  sampling2    1              Symbol  0.859360   \n","3          q_10  wrong_sampling  sampling2    1      Syntactic:ROOT  0.574044   \n","4          q_10  wrong_sampling  sampling2    1     Syntactic:appos  0.662811   \n","...         ...             ...        ...  ...                 ...       ...   \n","4188       q_99  wrong_sampling  sampling2    3     Syntactic:punct  0.939346   \n","4189       q_99  wrong_sampling  sampling2    3  Syntactic:quantmod  1.000000   \n","4190       q_99  wrong_sampling  sampling2    3  Syntactic:quantmod  1.000000   \n","4191       q_99  wrong_sampling  sampling2    3     Syntactic:relcl  1.000000   \n","4192       q_99  wrong_sampling  sampling2    3     Syntactic:relcl  1.000000   \n","\n","      Token_Count  \n","0               2  \n","1               1  \n","2              10  \n","3               2  \n","4               1  \n","...           ...  \n","4188            4  \n","4189            1  \n","4190            1  \n","4191            1  \n","4192            1  \n","\n","[4193 rows x 7 columns]"],"text/html":["\n","  <div id=\"df-f4610a2b-2ea5-4127-980f-98a432c4e972\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>QuestionID</th>\n","      <th>Mode</th>\n","      <th>Sampling</th>\n","      <th>Step</th>\n","      <th>Cluster</th>\n","      <th>Avg_Prob</th>\n","      <th>Token_Count</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>q_10</td>\n","      <td>wrong_sampling</td>\n","      <td>sampling2</td>\n","      <td>1</td>\n","      <td>Entity:ORDINAL</td>\n","      <td>0.586523</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>q_10</td>\n","      <td>wrong_sampling</td>\n","      <td>sampling2</td>\n","      <td>1</td>\n","      <td>LogicalConnector</td>\n","      <td>0.966046</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>q_10</td>\n","      <td>wrong_sampling</td>\n","      <td>sampling2</td>\n","      <td>1</td>\n","      <td>Symbol</td>\n","      <td>0.859360</td>\n","      <td>10</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>q_10</td>\n","      <td>wrong_sampling</td>\n","      <td>sampling2</td>\n","      <td>1</td>\n","      <td>Syntactic:ROOT</td>\n","      <td>0.574044</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>q_10</td>\n","      <td>wrong_sampling</td>\n","      <td>sampling2</td>\n","      <td>1</td>\n","      <td>Syntactic:appos</td>\n","      <td>0.662811</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>4188</th>\n","      <td>q_99</td>\n","      <td>wrong_sampling</td>\n","      <td>sampling2</td>\n","      <td>3</td>\n","      <td>Syntactic:punct</td>\n","      <td>0.939346</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>4189</th>\n","      <td>q_99</td>\n","      <td>wrong_sampling</td>\n","      <td>sampling2</td>\n","      <td>3</td>\n","      <td>Syntactic:quantmod</td>\n","      <td>1.000000</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4190</th>\n","      <td>q_99</td>\n","      <td>wrong_sampling</td>\n","      <td>sampling2</td>\n","      <td>3</td>\n","      <td>Syntactic:quantmod</td>\n","      <td>1.000000</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4191</th>\n","      <td>q_99</td>\n","      <td>wrong_sampling</td>\n","      <td>sampling2</td>\n","      <td>3</td>\n","      <td>Syntactic:relcl</td>\n","      <td>1.000000</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4192</th>\n","      <td>q_99</td>\n","      <td>wrong_sampling</td>\n","      <td>sampling2</td>\n","      <td>3</td>\n","      <td>Syntactic:relcl</td>\n","      <td>1.000000</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>4193 rows × 7 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f4610a2b-2ea5-4127-980f-98a432c4e972')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f4610a2b-2ea5-4127-980f-98a432c4e972 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f4610a2b-2ea5-4127-980f-98a432c4e972');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-5c78a0c8-e3e4-44e1-b2a8-0e141daa9e2b\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5c78a0c8-e3e4-44e1-b2a8-0e141daa9e2b')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-5c78a0c8-e3e4-44e1-b2a8-0e141daa9e2b button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_stats","summary":"{\n  \"name\": \"df_stats\",\n  \"rows\": 4193,\n  \"fields\": [\n    {\n      \"column\": \"QuestionID\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 69,\n        \"samples\": [\n          \"q_166\",\n          \"q_10\",\n          \"q_52\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Mode\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"correct_sampling\",\n          \"wrong_sampling\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sampling\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"sampling2\",\n          \"sampling1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Step\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"8\",\n          \"2\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cluster\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 58,\n        \"samples\": [\n          \"Entity:ORDINAL\",\n          \"Syntactic:attr\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Avg_Prob\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.21323326750221808,\n        \"min\": 0.013851572759449482,\n        \"max\": 1.0,\n        \"num_unique_values\": 1665,\n        \"samples\": [\n          0.5660353302955627,\n          0.771936297416687\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Token_Count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1,\n        \"max\": 55,\n        \"num_unique_values\": 29,\n        \"samples\": [\n          33,\n          24\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}],"source":["# 安装 spaCy 英文模型（如果尚未安装）\n","from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import spacy.cli\n","spacy.cli.download(\"en_core_web_sm\")\n","\n","import json\n","import pandas as pd\n","from collections import defaultdict\n","import spacy\n","\n","# 加载 spaCy 模型\n","nlp = spacy.load(\"en_core_web_sm\")\n","\n","# 设置文件路径\n","LOGITS_PATH = \"/content/drive/MyDrive/Cluster-proj/output/deepseek7b-math-401-600_with_steps.json\"\n","STAT_PATH = \"/content/drive/MyDrive/Cluster-proj/output/stat_logits/stat_logits_deepseek7b-math-401-600.json\"\n","\n","# 读取数据\n","with open(LOGITS_PATH, 'r') as f:\n","    logits_data = json.load(f)\n","with open(STAT_PATH, 'r') as f:\n","    stat_data = json.load(f)\n","\n","# 分类定义\n","logical_connectors = {\n","    \"because\", \"so\", \"therefore\", \"however\", \"thus\", \"but\", \"although\",\n","    \"though\", \"moreover\", \"meanwhile\", \"consequently\", \"nevertheless\",\n","    \"since\", \"as\", \"nonetheless\", \"then\", \"hence\", \"while\"\n","}\n","symbol_tokens = {\"Step\", \":\", \".\", \",\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", \"<\", \">\", \"!\", \"?\"}\n","symbol_tokens.update({str(i) for i in range(10)})\n","\n","# 处理单步 logits -> cluster\n","def analyze_step(step_data):\n","    sentence = \" \".join([t[\"token\"] for t in step_data])\n","    doc = nlp(sentence)\n","    original_tokens = [t[\"token\"] for t in step_data]\n","    original_probs = [t[\"prob\"] for t in step_data]\n","    cluster_map = defaultdict(list)\n","    token_idx = 0\n","    for token in doc:\n","        if token_idx >= len(original_tokens):\n","            break\n","        if token.text != original_tokens[token_idx]:\n","            token_idx += 1\n","            continue\n","        prob = original_probs[token_idx]\n","        token_lower = token.text.lower()\n","        if token.text in symbol_tokens:\n","            cluster = \"Symbol\"\n","        elif token_lower in logical_connectors:\n","            cluster = \"LogicalConnector\"\n","        elif token.ent_type_:\n","            cluster = f\"Entity:{token.ent_type_}\"\n","        elif token.dep_:\n","            cluster = f\"Syntactic:{token.dep_}\"\n","        else:\n","            cluster = \"Other\"\n","        cluster_map[cluster].append(prob)\n","        token_idx += 1\n","    return {\n","        \"Cluster\": list(cluster_map.keys()),\n","        \"Avg_Prob\": [sum(p)/len(p) for p in cluster_map.values()],\n","        \"Token_Count\": [len(p) for p in cluster_map.values()]\n","    }\n","\n","# 遍历所有 question id\n","records = []\n","for qid, info in stat_data.items():\n","    for mode, mode_data in info.items():  # correct_sampling / wrong_sampling\n","        for samp, detail in mode_data.items():\n","            for vs_key, value in detail.items():\n","                step_type = \"fix_step\" if mode == \"correct_sampling\" else \"error_step\"\n","                step_num = str(value.get(step_type))\n","                logits_key = f\"{samp}_step_token_probs\"\n","                if (\n","                    qid not in logits_data\n","                    or logits_key not in logits_data[qid]\n","                    or step_num not in logits_data[qid][logits_key]\n","                ):\n","                    continue\n","                step_data = logits_data[qid][logits_key][step_num]\n","                result = analyze_step(step_data)\n","                for cluster, avg_prob, count in zip(result[\"Cluster\"], result[\"Avg_Prob\"], result[\"Token_Count\"]):\n","                    records.append({\n","                        \"QuestionID\": qid,\n","                        \"Mode\": mode,\n","                        \"Sampling\": samp,\n","                        \"Step\": step_num,\n","                        \"Cluster\": cluster,\n","                        \"Avg_Prob\": avg_prob,\n","                        \"Token_Count\": count\n","                    })\n","\n","# 转为 DataFrame\n","df_stats = pd.DataFrame(records)\n","df_stats.sort_values(by=[\"QuestionID\", \"Step\", \"Cluster\"], inplace=True)\n","df_stats.reset_index(drop=True, inplace=True)\n","\n","# 展示结果（在 Colab 中）\n","from IPython.display import display\n","display(df_stats)\n","\n","# 如需保存结果：\n","# df_stats.to_csv(\"cluster_prob_stats.csv\", index=False)\n"]},{"cell_type":"code","source":["import json\n","import pandas as pd\n","from collections import defaultdict\n","import spacy\n","import os\n","\n","# ✅ 修改路径为你本地的绝对路径或相对路径\n","LOGITS_PATH = \"/content/drive/MyDrive/Cluster-proj/output/deepseek7b-math-401-600_with_steps.json\"\n","STAT_PATH = \"/content/drive/MyDrive/Cluster-proj/output/stat_logits/stat_logits_deepseek7b-math-401-600.json\"\n","OUTPUT_AGG = \"/content/drive/MyDrive/Cluster-proj/output/stat_cluster_results/cluster_group_stats.csv\"\n","OUTPUT_DIFF = \"/content/drive/MyDrive/Cluster-proj/output/stat_cluster_results/fix_vs_error_diff.csv\"\n","OUTPUT_AGG_JSON = \"/content/drive/MyDrive/Cluster-proj/output/stat_cluster_results/cluster_group_stats.json\"\n","OUTPUT_DIFF_JSON = \"/content/drive/MyDrive/Cluster-proj/output/stat_cluster_results/fix_vs_error_diff.json\"\n","\n","\n","# ✅ 加载 spaCy 模型（如未安装：运行 `python -m spacy download en_core_web_sm`）\n","nlp = spacy.load(\"en_core_web_sm\")\n","\n","# 加载数据\n","with open(LOGITS_PATH, 'r') as f:\n","    logits_data = json.load(f)\n","with open(STAT_PATH, 'r') as f:\n","    stat_data = json.load(f)\n","\n","# 定义逻辑与符号标记规则\n","logical_connectors = {\n","    \"because\", \"so\", \"therefore\", \"however\", \"thus\", \"but\", \"although\",\n","    \"though\", \"moreover\", \"meanwhile\", \"consequently\", \"nevertheless\",\n","    \"since\", \"as\", \"nonetheless\", \"then\", \"hence\", \"while\"\n","}\n","symbol_tokens = {\"Step\", \":\", \".\", \",\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", \"<\", \">\", \"!\", \"?\"}\n","symbol_tokens.update({str(i) for i in range(10)})\n","\n","# 聚类处理函数\n","def analyze_step(step_data):\n","    sentence = \" \".join([t[\"token\"] for t in step_data])\n","    doc = nlp(sentence)\n","    original_tokens = [t[\"token\"] for t in step_data]\n","    original_probs = [t[\"prob\"] for t in step_data]\n","    cluster_map = defaultdict(list)\n","    token_idx = 0\n","    for token in doc:\n","        if token_idx >= len(original_tokens):\n","            break\n","        if token.text != original_tokens[token_idx]:\n","            token_idx += 1\n","            continue\n","        prob = original_probs[token_idx]\n","        token_lower = token.text.lower()\n","        if token.text in symbol_tokens:\n","            cluster = \"Symbol\"\n","        elif token_lower in logical_connectors:\n","            cluster = \"LogicalConnector\"\n","        elif token.ent_type_:\n","            cluster = f\"Entity:{token.ent_type_}\"\n","        elif token.dep_:\n","            cluster = f\"Syntactic:{token.dep_}\"\n","        else:\n","            cluster = \"Other\"\n","        cluster_map[cluster].append(prob)\n","        token_idx += 1\n","    return {\n","        \"Cluster\": list(cluster_map.keys()),\n","        \"Avg_Prob\": [sum(p)/len(p) for p in cluster_map.values()],\n","        \"Token_Count\": [len(p) for p in cluster_map.values()]\n","    }\n","\n","# 遍历所有问题的 fix/error 步骤\n","records = []\n","for qid, info in stat_data.items():\n","    for mode, mode_data in info.items():  # correct_sampling / wrong_sampling\n","        for samp, detail in mode_data.items():\n","            for vs_key, value in detail.items():\n","                step_type = \"fix_step\" if mode == \"correct_sampling\" else \"error_step\"\n","                step_num = str(value.get(step_type))\n","                logits_key = f\"{samp}_step_token_probs\"\n","                if (\n","                    qid not in logits_data\n","                    or logits_key not in logits_data[qid]\n","                    or step_num not in logits_data[qid][logits_key]\n","                ):\n","                    continue\n","                step_data = logits_data[qid][logits_key][step_num]\n","                result = analyze_step(step_data)\n","                for cluster, avg_prob, count in zip(result[\"Cluster\"], result[\"Avg_Prob\"], result[\"Token_Count\"]):\n","                    records.append({\n","                        \"QuestionID\": qid,\n","                        \"Mode\": mode,\n","                        \"Sampling\": samp,\n","                        \"Step\": step_num,\n","                        \"Cluster\": cluster,\n","                        \"Avg_Prob\": avg_prob,\n","                        \"Token_Count\": count\n","                    })\n","\n","# 构建基础表格\n","df_stats = pd.DataFrame(records)\n","\n","# === 功能 1：聚合 cluster 大类 ===\n","def extract_cluster_category(cluster_name):\n","    if cluster_name.startswith(\"Entity:\"):\n","        return \"Entity\"\n","    elif cluster_name.startswith(\"Syntactic:\"):\n","        return \"Syntactic\"\n","    else:\n","        return cluster_name\n","\n","df_stats[\"ClusterGroup\"] = df_stats[\"Cluster\"].apply(extract_cluster_category)\n","\n","df_agg = (\n","    df_stats.groupby([\"QuestionID\", \"Mode\", \"ClusterGroup\"])\n","    .agg(Sum_Prob=(\"Avg_Prob\", \"sum\"),\n","         Avg_Prob=(\"Avg_Prob\", \"mean\"),\n","         Token_Count=(\"Token_Count\", \"sum\"))\n","    .reset_index()\n",")\n","\n","# === 功能 2：Fix vs Error 比较 ===\n","fix_df = df_agg[df_agg[\"Mode\"] == \"correct_sampling\"].rename(\n","    columns={\"Avg_Prob\": \"Fix_Prob\", \"Token_Count\": \"Fix_Tokens\"}\n",")\n","err_df = df_agg[df_agg[\"Mode\"] == \"wrong_sampling\"].rename(\n","    columns={\"Avg_Prob\": \"Error_Prob\", \"Token_Count\": \"Error_Tokens\"}\n",")\n","\n","df_diff = pd.merge(\n","    fix_df[[\"QuestionID\", \"ClusterGroup\", \"Fix_Prob\", \"Fix_Tokens\"]],\n","    err_df[[\"QuestionID\", \"ClusterGroup\", \"Error_Prob\", \"Error_Tokens\"]],\n","    on=[\"QuestionID\", \"ClusterGroup\"],\n","    how=\"outer\"\n",")\n","\n","df_diff[\"Fix_Prob\"] = df_diff[\"Fix_Prob\"].fillna(0)\n","df_diff[\"Error_Prob\"] = df_diff[\"Error_Prob\"].fillna(0)\n","df_diff[\"Fix_Tokens\"] = df_diff[\"Fix_Tokens\"].fillna(0)\n","df_diff[\"Error_Tokens\"] = df_diff[\"Error_Tokens\"].fillna(0)\n","df_diff[\"Prob_Diff\"] = df_diff[\"Error_Prob\"] - df_diff[\"Fix_Prob\"]\n","\n","\n","# 保存结果（CSV）\n","os.makedirs(os.path.dirname(OUTPUT_AGG), exist_ok=True)\n","df_agg.to_csv(OUTPUT_AGG, index=False)\n","df_diff.to_csv(OUTPUT_DIFF, index=False)\n","\n","# 保存结果（JSON）\n","# 保存 CSV 文件\n","os.makedirs(os.path.dirname(OUTPUT_AGG), exist_ok=True)\n","df_agg.to_csv(OUTPUT_AGG, index=False)\n","df_diff.to_csv(OUTPUT_DIFF, index=False)\n","\n","# 保存 JSON 文件（扁平结构）\n","OUTPUT_AGG_JSON = OUTPUT_AGG.replace(\".csv\", \".json\")\n","OUTPUT_DIFF_JSON = OUTPUT_DIFF.replace(\".csv\", \".json\")\n","df_agg.to_json(OUTPUT_AGG_JSON, orient=\"records\", indent=2)\n","\n","# === 修改输出结构：按 QuestionID 分组的嵌套 JSON ===\n","diff_grouped_dict = defaultdict(list)\n","for _, row in df_diff.iterrows():\n","    qid = row[\"QuestionID\"]\n","    entry = {\n","        \"ClusterGroup\": row[\"ClusterGroup\"],\n","        \"Fix_Prob\": round(row[\"Fix_Prob\"], 6),\n","        \"Fix_Tokens\": int(row[\"Fix_Tokens\"]),\n","        \"Error_Prob\": round(row[\"Error_Prob\"], 6),\n","        \"Error_Tokens\": int(row[\"Error_Tokens\"]),\n","        \"Prob_Diff\": round(row[\"Prob_Diff\"], 6),\n","    }\n","    diff_grouped_dict[qid].append(entry)\n","\n","# 写入 JSON 文件\n","OUTPUT_DIFF_GROUPED_JSON = OUTPUT_DIFF.replace(\".csv\", \"_by_question.json\")\n","with open(OUTPUT_DIFF_GROUPED_JSON, \"w\") as f:\n","    json.dump(diff_grouped_dict, f, indent=2)\n","\n","print(f\"[✓] 聚合结果保存至: {OUTPUT_AGG} 和 {OUTPUT_AGG_JSON}\")\n","print(f\"[✓] Fix vs Error 对比结果保存至: {OUTPUT_DIFF} 和 {OUTPUT_DIFF_JSON}\")\n","print(f\"[✓] 嵌套 JSON 保存至: {OUTPUT_DIFF_GROUPED_JSON}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ncHz_kY3E9UL","executionInfo":{"status":"ok","timestamp":1747550270763,"user_tz":-480,"elapsed":5887,"user":{"displayName":"Tingting Du","userId":"01262363838823204487"}},"outputId":"00f7be20-da68-49b5-c09f-404268e97eb3"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["[✓] 聚合结果保存至: /content/drive/MyDrive/Cluster-proj/output/stat_cluster_results/cluster_group_stats.csv 和 /content/drive/MyDrive/Cluster-proj/output/stat_cluster_results/cluster_group_stats.json\n","[✓] Fix vs Error 对比结果保存至: /content/drive/MyDrive/Cluster-proj/output/stat_cluster_results/fix_vs_error_diff.csv 和 /content/drive/MyDrive/Cluster-proj/output/stat_cluster_results/fix_vs_error_diff.json\n","[✓] 嵌套 JSON 保存至: /content/drive/MyDrive/Cluster-proj/output/stat_cluster_results/fix_vs_error_diff_by_question.json\n"]}]},{"cell_type":"code","source":["import os\n","import json\n","import pandas as pd\n","from collections import defaultdict\n","import spacy\n","\n","# ✅ 只改这两个参数\n","start_index = 201\n","end_index = 300\n","range_tag = f\"{start_index}-{end_index}\"\n","\n","# ✅ 自动拼接路径\n","BASE_PATH = \"/content/drive/MyDrive/Cluster-proj/output\"\n","LOGITS_PATH = f\"{BASE_PATH}/deepseek7b-math-{range_tag}_with_steps.json\"\n","STAT_PATH = f\"{BASE_PATH}/stat_logits/stat_logits_deepseek7b-math-{range_tag}.json\"\n","\n","OUTPUT_DIR = f\"{BASE_PATH}/stat_cluster_results\"\n","os.makedirs(OUTPUT_DIR, exist_ok=True)\n","\n","OUTPUT_AGG = f\"{OUTPUT_DIR}/cluster_group_stats_{range_tag}.csv\"\n","OUTPUT_DIFF = f\"{OUTPUT_DIR}/fix_vs_error_diff_{range_tag}.csv\"\n","OUTPUT_AGG_JSON = f\"{OUTPUT_DIR}/cluster_group_stats_{range_tag}.json\"\n","OUTPUT_DIFF_JSON = f\"{OUTPUT_DIR}/fix_vs_error_diff_{range_tag}.json\"\n","OUTPUT_DIFF_GROUPED_JSON = f\"{OUTPUT_DIR}/diff_result/fix_vs_error_diff_by_question_{range_tag}.json\"\n","\n","# ✅ 加载 spaCy 模型\n","nlp = spacy.load(\"en_core_web_sm\")\n","\n","# ✅ 加载数据\n","with open(LOGITS_PATH, 'r') as f:\n","    logits_data = json.load(f)\n","with open(STAT_PATH, 'r') as f:\n","    stat_data = json.load(f)\n","\n","# ✅ 规则定义\n","logical_connectors = {\n","    \"because\", \"so\", \"therefore\", \"however\", \"thus\", \"but\", \"although\",\n","    \"though\", \"moreover\", \"meanwhile\", \"consequently\", \"nevertheless\",\n","    \"since\", \"as\", \"nonetheless\", \"then\", \"hence\", \"while\"\n","}\n","symbol_tokens = {\"Step\", \":\", \".\", \",\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", \"<\", \">\", \"!\", \"?\"}\n","symbol_tokens.update({str(i) for i in range(10)})\n","\n","# ✅ 聚类处理函数\n","def analyze_step(step_data):\n","    sentence = \" \".join([t[\"token\"] for t in step_data])\n","    doc = nlp(sentence)\n","    original_tokens = [t[\"token\"] for t in step_data]\n","    original_probs = [t[\"prob\"] for t in step_data]\n","    cluster_map = defaultdict(list)\n","    token_idx = 0\n","    for token in doc:\n","        if token_idx >= len(original_tokens):\n","            break\n","        if token.text != original_tokens[token_idx]:\n","            token_idx += 1\n","            continue\n","        prob = original_probs[token_idx]\n","        token_lower = token.text.lower()\n","        if token.text in symbol_tokens:\n","            cluster = \"Symbol\"\n","        elif token_lower in logical_connectors:\n","            cluster = \"LogicalConnector\"\n","        elif token.ent_type_:\n","            cluster = f\"Entity:{token.ent_type_}\"\n","        elif token.dep_:\n","            cluster = f\"Syntactic:{token.dep_}\"\n","        else:\n","            cluster = \"Other\"\n","        cluster_map[cluster].append(prob)\n","        token_idx += 1\n","    return {\n","        \"Cluster\": list(cluster_map.keys()),\n","        \"Avg_Prob\": [sum(p)/len(p) for p in cluster_map.values()],\n","        \"Token_Count\": [len(p) for p in cluster_map.values()]\n","    }\n","\n","# ✅ 遍历处理所有 question\n","records = []\n","for qid, info in stat_data.items():\n","    for mode, mode_data in info.items():\n","        for samp, detail in mode_data.items():\n","            for vs_key, value in detail.items():\n","                step_type = \"fix_step\" if mode == \"correct_sampling\" else \"error_step\"\n","                step_num = str(value.get(step_type))\n","                logits_key = f\"{samp}_step_token_probs\"\n","                if (\n","                    qid not in logits_data\n","                    or logits_key not in logits_data[qid]\n","                    or step_num not in logits_data[qid][logits_key]\n","                ):\n","                    continue\n","                step_data = logits_data[qid][logits_key][step_num]\n","                result = analyze_step(step_data)\n","                for cluster, avg_prob, count in zip(result[\"Cluster\"], result[\"Avg_Prob\"], result[\"Token_Count\"]):\n","                    records.append({\n","                        \"QuestionID\": qid,\n","                        \"Mode\": mode,\n","                        \"Sampling\": samp,\n","                        \"Step\": step_num,\n","                        \"Cluster\": cluster,\n","                        \"Avg_Prob\": avg_prob,\n","                        \"Token_Count\": count\n","                    })\n","\n","# ✅ 基础表格\n","df_stats = pd.DataFrame(records)\n","\n","# ✅ 聚合大类\n","def extract_cluster_category(cluster_name):\n","    if cluster_name.startswith(\"Entity:\"):\n","        return \"Entity\"\n","    elif cluster_name.startswith(\"Syntactic:\"):\n","        return \"Syntactic\"\n","    else:\n","        return cluster_name\n","\n","df_stats[\"ClusterGroup\"] = df_stats[\"Cluster\"].apply(extract_cluster_category)\n","df_agg = (\n","    df_stats.groupby([\"QuestionID\", \"Mode\", \"ClusterGroup\"])\n","    .agg(Sum_Prob=(\"Avg_Prob\", \"sum\"),\n","         Avg_Prob=(\"Avg_Prob\", \"mean\"),\n","         Token_Count=(\"Token_Count\", \"sum\"))\n","    .reset_index()\n",")\n","\n","# ✅ Fix vs Error 差异对比\n","fix_df = df_agg[df_agg[\"Mode\"] == \"correct_sampling\"].rename(\n","    columns={\"Avg_Prob\": \"Fix_Prob\", \"Token_Count\": \"Fix_Tokens\"}\n",")\n","err_df = df_agg[df_agg[\"Mode\"] == \"wrong_sampling\"].rename(\n","    columns={\"Avg_Prob\": \"Error_Prob\", \"Token_Count\": \"Error_Tokens\"}\n",")\n","\n","df_diff = pd.merge(\n","    fix_df[[\"QuestionID\", \"ClusterGroup\", \"Fix_Prob\", \"Fix_Tokens\"]],\n","    err_df[[\"QuestionID\", \"ClusterGroup\", \"Error_Prob\", \"Error_Tokens\"]],\n","    on=[\"QuestionID\", \"ClusterGroup\"],\n","    how=\"outer\"\n",")\n","\n","df_diff[\"Fix_Prob\"] = df_diff[\"Fix_Prob\"].fillna(0)\n","df_diff[\"Error_Prob\"] = df_diff[\"Error_Prob\"].fillna(0)\n","df_diff[\"Fix_Tokens\"] = df_diff[\"Fix_Tokens\"].fillna(0)\n","df_diff[\"Error_Tokens\"] = df_diff[\"Error_Tokens\"].fillna(0)\n","df_diff[\"Prob_Diff\"] = df_diff[\"Error_Prob\"] - df_diff[\"Fix_Prob\"]\n","\n","# ✅ 保存 CSV\n","df_agg.to_csv(OUTPUT_AGG, index=False)\n","df_diff.to_csv(OUTPUT_DIFF, index=False)\n","\n","# ✅ 保存扁平 JSON\n","df_agg.to_json(OUTPUT_AGG_JSON, orient=\"records\", indent=2)\n","df_diff.to_json(OUTPUT_DIFF_JSON, orient=\"records\", indent=2)\n","\n","# ✅ 保存嵌套结构 JSON\n","diff_grouped_dict = defaultdict(list)\n","for _, row in df_diff.iterrows():\n","    qid = row[\"QuestionID\"]\n","    entry = {\n","        \"ClusterGroup\": row[\"ClusterGroup\"],\n","        \"Fix_Prob\": round(row[\"Fix_Prob\"], 6),\n","        \"Fix_Tokens\": int(row[\"Fix_Tokens\"]),\n","        \"Error_Prob\": round(row[\"Error_Prob\"], 6),\n","        \"Error_Tokens\": int(row[\"Error_Tokens\"]),\n","        \"Prob_Diff\": round(row[\"Prob_Diff\"], 6),\n","    }\n","    diff_grouped_dict[qid].append(entry)\n","\n","with open(OUTPUT_DIFF_GROUPED_JSON, \"w\") as f:\n","    json.dump(diff_grouped_dict, f, indent=2)\n","\n","# ✅ 输出提示\n","print(f\"[✓] 聚合 CSV  → {OUTPUT_AGG}\")\n","print(f\"[✓] 差异 CSV  → {OUTPUT_DIFF}\")\n","print(f\"[✓] 聚合 JSON → {OUTPUT_AGG_JSON}\")\n","print(f\"[✓] 差异 JSON → {OUTPUT_DIFF_JSON}\")\n","print(f\"[✓] 嵌套 JSON → {OUTPUT_DIFF_GROUPED_JSON}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Or6z-7dyIt0e","executionInfo":{"status":"ok","timestamp":1747551044776,"user_tz":-480,"elapsed":5954,"user":{"displayName":"Tingting Du","userId":"01262363838823204487"}},"outputId":"2cdf9a3e-b195-4926-ea01-3a8e039189c6"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["[✓] 聚合 CSV  → /content/drive/MyDrive/Cluster-proj/output/stat_cluster_results/cluster_group_stats_201-300.csv\n","[✓] 差异 CSV  → /content/drive/MyDrive/Cluster-proj/output/stat_cluster_results/fix_vs_error_diff_201-300.csv\n","[✓] 聚合 JSON → /content/drive/MyDrive/Cluster-proj/output/stat_cluster_results/cluster_group_stats_201-300.json\n","[✓] 差异 JSON → /content/drive/MyDrive/Cluster-proj/output/stat_cluster_results/fix_vs_error_diff_201-300.json\n","[✓] 嵌套 JSON → /content/drive/MyDrive/Cluster-proj/output/stat_cluster_results/diff_result/fix_vs_error_diff_by_question_201-300.json\n"]}]},{"cell_type":"code","source":["import os\n","import json\n","\n","# ✅ 修改为你想检查的文件夹路径\n","FOLDER_PATH = \"/content/drive/MyDrive/Cluster-proj/output/stat_cluster_results/diff_result\"\n","\n","# ✅ 初始化集合用于统计唯一的 question id（q_id）\n","all_question_ids = set()\n","\n","# ✅ 遍历所有 diff_by_question_*.json 文件\n","for filename in os.listdir(FOLDER_PATH):\n","    if filename.endswith(\".json\") and filename.startswith(\"fix_vs_error_diff_by_question_\"):\n","        full_path = os.path.join(FOLDER_PATH, filename)\n","        with open(full_path, \"r\") as f:\n","            data = json.load(f)\n","            all_question_ids.update(data.keys())\n","\n","# ✅ 输出总数量\n","print(f\"📊 Total number of unique question IDs (q_id): {len(all_question_ids)}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fSOwaq6KaES_","executionInfo":{"status":"ok","timestamp":1747555222410,"user_tz":-480,"elapsed":30,"user":{"displayName":"Tingting Du","userId":"01262363838823204487"}},"outputId":"37f06a78-8c4e-46e7-f6b9-8a860880e72f"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["📊 Total number of unique question IDs (q_id): 104\n"]}]},{"cell_type":"code","source":["import os\n","import json\n","import matplotlib.pyplot as plt\n","from collections import defaultdict\n","import numpy as np\n","\n","# ✅ 修改为你的本地路径：包含多个 *_by_question_*.json 文件的目录\n","FOLDER_PATH = \"/content/drive/MyDrive/Cluster-proj/output/stat_cluster_results/diff_result\"\n","\n","# ✅ 读取所有 question 合并为一个字典\n","combined_data = defaultdict(list)\n","for filename in sorted(os.listdir(FOLDER_PATH)):\n","    if filename.endswith(\".json\") and filename.startswith(\"fix_vs_error_diff_by_question_\"):\n","        file_path = os.path.join(FOLDER_PATH, filename)\n","        with open(file_path, \"r\") as f:\n","            data = json.load(f)\n","            for qid, records in data.items():\n","                combined_data[qid].extend(records)\n","\n","# ✅ 提取四个目标 ClusterGroup 的 Prob_Diff 数据\n","target_clusters = [\"Entity\", \"LogicalConnector\", \"Symbol\", \"Syntactic\"]\n","cluster_diff = defaultdict(list)\n","\n","for qid, records in combined_data.items():\n","    for record in records:\n","        group = record[\"ClusterGroup\"]\n","        if group in target_clusters:\n","            cluster_diff[group].append(record[\"Prob_Diff\"])\n","\n","# ✅ 自定义绘图函数：正值向上，负值向下\n","def plot_pos_neg_hist(data, group_name, bins=20):\n","    counts, bin_edges = np.histogram(data, bins=bins)\n","    bin_centers = 0.5 * (bin_edges[:-1] + bin_edges[1:])\n","\n","    # 正负条分离\n","    pos_counts = [c if bc > 0 else 0 for c, bc in zip(counts, bin_centers)]\n","    neg_counts = [-c if bc < 0 else 0 for c, bc in zip(counts, bin_centers)]\n","\n","    plt.figure(figsize=(7, 4))\n","    plt.bar(bin_centers, pos_counts, width=bin_edges[1]-bin_edges[0], color='green', label='Positive Diff')\n","    plt.bar(bin_centers, neg_counts, width=bin_edges[1]-bin_edges[0], color='red', label='Negative Diff')\n","\n","    plt.axhline(0, color='black', linewidth=0.8)\n","    plt.title(f\"Prob_Diff Distribution for {group_name}\")\n","    plt.xlabel(\"Error_Prob - Fix_Prob\")\n","    plt.ylabel(\"Frequency (Signed)\")\n","    plt.legend()\n","    plt.grid(True)\n","    plt.tight_layout()\n","    plt.show()\n","\n","# ✅ 绘制四类 cluster 的对称直方图\n","for group in target_clusters:\n","    diffs = cluster_diff[group]\n","    if diffs:  # 避免空图\n","        plot_pos_neg_hist(diffs, group)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"O0fI5wH6XhjC","executionInfo":{"status":"ok","timestamp":1747554641154,"user_tz":-480,"elapsed":1366,"user":{"displayName":"Tingting Du","userId":"01262363838823204487"}},"outputId":"8dba3512-b131-4ff7-f06a-7aa23456b20f"},"execution_count":8,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 700x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 700x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 700x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 700x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["def print_cluster_stats(diffs, group):\n","    diffs_array = np.array(diffs)\n","    print(f\"--- {group} ---\")\n","    print(f\"Count:     {len(diffs_array)}\")\n","    print(f\"Mean:      {np.mean(diffs_array):.6f}\")\n","    print(f\"Median:    {np.median(diffs_array):.6f}\")\n","    print(f\"Std Dev:   {np.std(diffs_array):.6f}\")\n","    print(f\"Min:       {np.min(diffs_array):.6f}\")\n","    print(f\"Max:       {np.max(diffs_array):.6f}\")\n","    print()\n","\n","# ✅ 遍历四类 cluster：输出统计 + 绘图\n","for group in target_clusters:\n","    diffs = cluster_diff[group]\n","    if diffs:\n","        print_cluster_stats(diffs, group)\n","        plot_pos_neg_hist(diffs, group)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"KyG7JGzcY9hC","executionInfo":{"status":"ok","timestamp":1747554919658,"user_tz":-480,"elapsed":1573,"user":{"displayName":"Tingting Du","userId":"01262363838823204487"}},"outputId":"e23b80eb-c38f-431e-ed0b-89bca3ddedbe"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["--- Entity ---\n","Count:     144\n","Mean:      0.029286\n","Median:    0.000000\n","Std Dev:   0.376180\n","Min:       -1.000000\n","Max:       1.000000\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 700x400 with 1 Axes>"],"image/png":"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dOlSNG7cGHZ2dqhZsyaaNGli8LS7nZ2dwTjBCxcuoHbt2nBxcdFrL/kV6IULF/TaGzVqZHDsxo0bIz8/H1evXoWXl5clTge5ubkAYBBXRTMljldeeQUbN25Ez549UadOHYSEhOD5559HWFiYycfx8/MzK677fw7Ozs6oVauW1afQunDhAho1amRwbZV2vdSrV09vuaSovX88rymuXr2K/Px8o8Mu/P39odPpcPHiRTRv3lxqL09e750BozT3nxdw99zKc14PMnjwYLz22mtYu3YtZsyYgaysLHz//feYPHmyWcNIiOSOd2SJHmHt2rVDcHAwunTpAn9/f6NTNqnVaqtP5WQpf/31F2xtbc0uRKwRB4Ayp/GqUaMGjhw5gm+//VYab9yzZ0/pYTRTODg4PHSsprLknfMHKe1uqCjlQUJLs1ZeK/K83N3d8eyzz2Lt2rUAgK+++goFBQUVMrsCUVUij3+9iKhC+fj44PLlywa/Ov/777+l9fc6ffq0wT5OnToFR0dHeHp6WiSmtLQ07NmzB0FBQZV+R/bzzz8HgAf+2l+lUqFPnz745JNPcPbsWbz88stYs2YNzpw5AwAWv3N2/88hNzcX6enpek/3u7u7S286K1FYWIj09HS9NnNi8/HxwenTpw3m0S3terEkT09PODo64uTJkwbr/v77b9jY2OjN91vZzMnrg/qOGDECp06dwoEDB7B27Vq0bt1a784z0eOAhSwRGejVqxeKi4uxZMkSvfZFixZBoVCgZ8+eeu379u3DH3/8IS1fvHgRW7duRUhIiFljEUtz48YNDB06FMXFxXjrrbceen8PY926dfj0008RFBSE7t27l9rv+vXress2NjbSTAklbwYrmb/0/sKyvFasWAGtVistx8XFoaioSO/n1aBBA4Op0VasWGFwR9ac2Hr16oWMjAxs2LBBaisqKsLHH38MZ2dnq47ZtLW1RUhICLZu3ao3hCIzMxPr1q1Dx44djc5wUVnMyeuD+vbs2RMeHh6IjY3Fnj17eDeWHkscI0tEBvr06YOuXbvirbfewvnz59GqVSskJiZi69ateO2119CgQQO9/i1atEBoaKje9FsAEBMTY/axT506hS+++AJCCGRnZ+Po0aPYtGkTcnNzsXDhQrPGmD6sr776Cs7OzigsLJTe7JWSkoJWrVph06ZNZW770ksv4caNG+jW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cnJysG7dOiQnJ2PHjh1wdXXFqFGjEBUVhWrVqkGj0eDVV19FUFAQZywgIiKqAM7OzmjUqJHsxyFrtVr8/PPP6NSpE//T8z+WzomtrS3s7OwsUhTLppC9cuUKRowYgfT0dLi6uqJly5bYsWMHevToAQBYtGgRbGxsMGjQIBQUFCA0NBSffPJJJUdNRET0+LC1tTV4cEdubG1tUVRUBHt7exay/1OVcyKbQvazzz4rc729vT2WLl1apd8HTERERESWI8t5ZImIiIiIWMgSERERkSyxkCUiIiIiWWIhS0RERESyxEKWiIiIiGSJhSwRERERyRILWSIiIiKSJRayRERERCRLLGSJiIiISJZYyBIRERGRLLGQJSIiIiJZYiFLRERERLLEQpaIiIiIZImFLBERERHJEgtZIiIiIpIlFrJEREREJEssZImIiIhIlljIEhEREZEssZAlIiIiIlliIUtEREREssRCloiIiIhkiYUsEREREckSC1kiIiIikiUWskREREQkSyxkiYiIiEiWWMgSERERkSyxkCUiIiIiWWIhS0RERESyxEKWiIiIiGSJhSwRERERyZLZhWxBQQF+/vlnfP7551i+fDk2b96Mc+fOWSM2PXPnzsWTTz4JFxcX1KhRA/3798fJkyf1+ty5cwfjx49H9erV4ezsjEGDBiEzM9PqsRERERFRxbMztWNKSgo+/PBDfPfdd9BqtXB1dYWDgwNu3LiBgoIC1K9fH2PGjMHYsWPh4uJi8UD37NmD8ePH48knn0RRURHefPNNhISEIDU1FU5OTgCAyZMn44cffsCmTZvg6uqKCRMmYODAgUhJSbF4PERERERUuUwqZPv27Ys//vgD4eHhSExMxBNPPAEHBwdp/T///INffvkFX375JRYuXIg1a9agR48eFg10+/btessJCQmoUaMGDh06hE6dOiErKwufffYZ1q1bh27dugEA4uPj4e/vj/379+Opp56yaDxEREREVLlMKmR79+6Nr7/+Gkql0uj6+vXro379+oiIiEBqairS09MtGqQxWVlZAIBq1aoBAA4dOgStVovg4GCpT9OmTVGvXj3s27ev1EK2oKAABQUF0nJ2djYAQKvVQqvVWit86Rj3/kl3MS+GmBPjmBdDJblwsHF4QE/LH7Mq47ViiDkxjnkxVNE5Mec4CiGEsGIsVqHT6dC3b1/cunUL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Nlq1aoXJkyeja9euqFatmrXjJSIiIiICYObDXgDwxBNP4IknnrBGLERERA9UnvkzS+bBdJ3navYbz8TM0mfLIaLKZfKbvYiIiIiIqhIWskREREQkSyxkiYiIiEiWWMgSERERkSyZXcj+888/1oiDiIiIiMgsZheyDRs2RNeuXfHFF1/gzp071oiJiIiIiOiBzC5k//jjD7Rs2RJRUVHw8vLCyy+/jN9//90asRERERERlcrsQjYwMBAffvghLl++jFWrViE9PR0dO3ZEixYtsHDhQly9etUacRIRERER6Sn3w152dnYYOHAgNm3ahNjYWJw5cwZTp06Ft7c3RowYgfT0dEvGSURERESkp9yF7MGDB/HKK6+gVq1aWLhwIaZOnYqzZ88iKSkJly9fRr9+/SwZJxERERGRHrNfUbtw4ULEx8fj5MmT6NWrF9asWYNevXrBxuZuTezn54eEhAT4+vpaOlYiIiIiIonZhWxcXBxefPFFREZGolatWkb71KhRA5999tlDB0dEREREVBqzC9nTp08/sI9KpUJERES5AiIiInpcKWIUFXYsBxsHfNnyywo7HpE1mD1GNj4+Hps2bTJo37RpE1avXm2RoIiIiIiIHsTsQnbu3Lnw8PAwaK9Rowbee+89iwRFRERERPQgZheyaWlp8PPzM2j38fFBWlqaRYIiIiIiInoQswvZGjVq4M8//zRoP3r0KKpXr26RoIiIiIiIHsTsQnbo0KGYOHEidu/ejeLiYhQXF+Onn37CpEmTMGTIEGvESERERERkwOxZC2bPno3z58+je/fusLO7u7lOp8OIESM4RpaIiIiIKozZhaxKpcKGDRswe/ZsHD16FA4ODggICICPj4814iMiIiIiMsrsQrZE48aN0bhxY0vGQkRERERkMrML2eLiYiQkJGDXrl24cuUKdDqd3vqffvrJYsEREREREZXG7EJ20qRJSEhIQO/evdGiRQsoFBX3FhIiIiIiohJmF7Lr16/Hxo0b0atXL2vEYxFLly7F+++/j4yMDLRq1Qoff/wx2rVrV9lhEREREZEFlethr4YNG1ojFovYsGEDoqKisGzZMrRv3x6LFy9GaGgoTp48iRo1alR2eEREJDOKmEf7N4+u81xxW3e7ssOoMhxsHPBlyy+ZF5kwex7ZKVOm4MMPP4QQwhrxPLSFCxdi9OjRGDlyJJo1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hSwRERERyRILWSIiIiKSJRayRERERCRLLGSJiIiISJZYyBIRERGRLLGQJSIiIiJZYiFLRERERLLEQpaIiIiIZImFLBERERHJEgtZIiIiIpIlFrJEREREJEssZImIiIhIlljIEhEREZEssZAlIiIiIlliIUtEREREssRCloiIiIhkiYUsEREREckSC1kiIiIikiUWskREREQkSyxkiYiIiEiWWMgSERERkSyxkCUiIiIiWWIhS0RERESyxEKWiIiIiGSJhSwRERERyRILWSIiIiKSJRayRERERCRLLGSJiIiISJZkU8j27dsX9erVg729PWrVqoXhw4fj8uXLen3+/PNPPPPMM7C3t4e3tzfmz59fSdESERERkbXJppDt2rUrNm7ciJMnT+Lrr7/G2bNn8Z///Edan52djZCQEPj4+ODQoUN4//33ER0djRUrVlRi1EREAISouK+srMo+WyKiCmNX2QGYavLkydL3Pj4+mDZtGvr37w+tVgulUom1a9eisLAQq1atgkqlQvPmzXHkyBEsXLgQY8aMqcTIiYiIiMgaZHNH9l43btzA2rVr0aFDByiVSgDAvn370KlTJ6hUKqlfaGgoTp48iZs3b1ZWqERERERkJbK5IwsAb7zxBpYsWYL8/Hw89dRT+P7776V1GRkZ8PPz0+tfs2ZNaZ27u7vRfRYUFKCgoEBazs7OBgBotVpotVpLn4Kekv1b+zhyw7wYYk6MY14MMSfGMS+GmBPjmBdDFZ0Tc46jEEIIK8ZSpmnTpiE2NrbMPidOnEDTpk0BANeuXcONGzdw4cIFxMTEwNXVFd9//z0UCgVCQkLg5+eH5cuXS9umpqaiefPmSE1Nhb+/v9H9R0dHIyYmxqB93bp1cHR0fIizIyIiIiJz5efnIzw8HFlZWdBoNGX2rdRC9urVq7h+/XqZferXr683XKDEpUuX4O3tjV9//RVBQUEYMWIEsrOz8c0330h9du/ejW7duuHGjRtm3ZH19vbGtWvXHpi8h6XVapGUlIQePXpIQySIeTGGOTGOeTHEnBjHvBhiToxjXgxVdE6ys7Ph4eFhUiFbqUMLPD094enpWa5tdTodAEhFaFBQEN566y3p4S8ASEpKQpMmTUotYgFArVZDrVYbtCuVygq7gCvyWHLCvBhiToxjXgwxJ8YxL4aYE+OYF0MVlRNzjiGLh71+++03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\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["--- LogicalConnector ---\n","Count:     94\n","Mean:      -0.235017\n","Median:    -0.234731\n","Std Dev:   0.598437\n","Min:       -1.000000\n","Max:       1.000000\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 700x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["--- Symbol ---\n","Count:     152\n","Mean:      -0.022590\n","Median:    -0.014848\n","Std Dev:   0.110423\n","Min:       -0.986946\n","Max:       0.261825\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 700x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["--- Syntactic ---\n","Count:     152\n","Mean:      -0.023742\n","Median:    -0.018581\n","Std Dev:   0.113618\n","Min:       -0.910342\n","Max:       0.235373\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 700x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import os\n","import json\n","import matplotlib.pyplot as plt\n","import numpy as np\n","\n","# ✅ 设置区间\n","start_index = 201\n","end_index = 300\n","range_tag = f\"{start_index}-{end_index}\"\n","\n","# ✅ 文件路径配置\n","BASE_PATH = \"/content/drive/MyDrive/Cluster-proj/output\"\n","LOGITS_PATH = f\"{BASE_PATH}/deepseek7b-math-{range_tag}_with_steps.json\"\n","STAT_PATH = f\"{BASE_PATH}/stat_logits/stat_logits_deepseek7b-math-{range_tag}.json\"\n","OUTPUT_JSON = f\"{BASE_PATH}/stat_cluster_results/last_minus_front_wrong_cases_{range_tag}.json\"\n","\n","# ✅ 加载数据\n","with open(LOGITS_PATH, 'r') as f:\n","    logits_data = json.load(f)\n","with open(STAT_PATH, 'r') as f:\n","    stat_data = json.load(f)\n","\n","# ✅ 数据收集容器\n","case_records = []\n","diff_values = []\n","\n","# ✅ 遍历所有错误案例\n","for qid, stat in stat_data.items():\n","    wrong_samplings = stat.get(\"wrong_sampling\", {})\n","    for samp, samp_data in wrong_samplings.items():\n","        for vs_correct, detail in samp_data.items():\n","            log_key = f\"{samp}_step_token_probs\"\n","            if qid not in logits_data or log_key not in logits_data[qid]:\n","                continue\n","            step_dict = logits_data[qid][log_key]\n","            step_items = sorted(step_dict.items(), key=lambda x: int(x[0]))\n","\n","            if len(step_items) < 2:\n","                continue  # 至少要一个 front 和一个 last\n","\n","            front_steps = step_items[:-1]\n","            last_step = step_items[-1]\n","\n","            front_probs = []\n","            for _, tokens in front_steps:\n","                if tokens:\n","                    front_probs.append(sum(t[\"prob\"] for t in tokens) / len(tokens))\n","            if not front_probs:\n","                continue\n","            front_avg = sum(front_probs) / len(front_probs)\n","\n","            last_tokens = last_step[1]\n","            if not last_tokens:\n","                continue\n","            last_avg = sum(t[\"prob\"] for t in last_tokens) / len(last_tokens)\n","\n","            if front_avg != last_avg:\n","                diff = round(last_avg - front_avg, 6)\n","                case_records.append({\n","                    \"qid\": qid,\n","                    \"sampling\": samp,\n","                    \"step_count\": len(step_items),\n","                    \"front_avg\": round(front_avg, 6),\n","                    \"last_avg\": round(last_avg, 6),\n","                    \"diff\": diff\n","                })\n","                diff_values.append(diff)\n","\n","# ✅ 保存 JSON 输出\n","with open(OUTPUT_JSON, \"w\") as f:\n","    json.dump(case_records, f, indent=2)\n","\n","# ✅ 正负分离直方图\n","counts, bins = np.histogram(diff_values, bins=20)\n","bin_centers = 0.5 * (bins[:-1] + bins[1:])\n","bin_width = bins[1] - bins[0]\n","\n","pos_counts = [c if bc > 0 else 0 for c, bc in zip(counts, bin_centers)]\n","neg_counts = [-c if bc < 0 else 0 for c, bc in zip(counts, bin_centers)]\n","\n","plt.figure(figsize=(8, 4))\n","plt.bar(bin_centers, pos_counts, width=bin_width, color='blue', label='last > front')\n","plt.bar(bin_centers, neg_counts, width=bin_width, color='red', label='last < front')\n","plt.axhline(0, color='black', linewidth=0.8)\n","plt.title(f\"(last_avg - front_avg) Distribution — {range_tag}\")\n","plt.xlabel(\"last_avg - front_avg\")\n","plt.ylabel(\"Frequency (Signed)\")\n","plt.legend()\n","plt.grid(True)\n","plt.tight_layout()\n","plt.show()\n","\n","# ✅ 控制台提示\n","print(f\"[✓] 共发现符合条件的错误 case: {len(case_records)}\")\n","print(f\"[✓] JSON 保存路径: {OUTPUT_JSON}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":443},"id":"0pcGzpyIxy0k","executionInfo":{"status":"ok","timestamp":1747562241683,"user_tz":-480,"elapsed":969,"user":{"displayName":"Tingting Du","userId":"01262363838823204487"}},"outputId":"1cc9e96e-da9e-4839-99ee-492317ec46b8"},"execution_count":16,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["[✓] 共发现符合条件的错误 case: 92\n","[✓] JSON 保存路径: /content/drive/MyDrive/Cluster-proj/output/stat_cluster_results/last_minus_front_wrong_cases_201-300.json\n"]}]},{"cell_type":"code","source":["import os\n","import json\n","import matplotlib.pyplot as plt\n","import numpy as np\n","\n","# ✅ 配置多个处理区间段\n","index_ranges = [(201, 300), (301, 400), (401, 600)]\n","\n","# ✅ 基础路径\n","BASE_PATH = \"/content/drive/MyDrive/Cluster-proj/output\"\n","OUTPUT_JSON = f\"{BASE_PATH}/stat_cluster_results/last_minus_front_wrong_cases_combined_201-600.json\"\n","\n","# ✅ 汇总记录\n","combined_case_records = []\n","combined_diff_values = []\n","\n","# ✅ 批量处理每个段\n","for start_index, end_index in index_ranges:\n","    range_tag = f\"{start_index}-{end_index}\"\n","    LOGITS_PATH = f\"{BASE_PATH}/deepseek7b-math-{range_tag}_with_steps.json\"\n","    STAT_PATH = f\"{BASE_PATH}/stat_logits/stat_logits_deepseek7b-math-{range_tag}.json\"\n","\n","    # 加载数据\n","    try:\n","        with open(LOGITS_PATH, 'r') as f:\n","            logits_data = json.load(f)\n","        with open(STAT_PATH, 'r') as f:\n","            stat_data = json.load(f)\n","    except Exception as e:\n","        print(f\"[!] Failed to load {range_tag}: {e}\")\n","        continue\n","\n","    # 遍历 wrong cases\n","    for qid, stat in stat_data.items():\n","        wrong_samplings = stat.get(\"wrong_sampling\", {})\n","        for samp, samp_data in wrong_samplings.items():\n","            for vs_correct, detail in samp_data.items():\n","                log_key = f\"{samp}_step_token_probs\"\n","                if qid not in logits_data or log_key not in logits_data[qid]:\n","                    continue\n","                step_dict = logits_data[qid][log_key]\n","                step_items = sorted(step_dict.items(), key=lambda x: int(x[0]))\n","\n","                if len(step_items) < 2:\n","                    continue\n","\n","                front_steps = step_items[:-1]\n","                last_step = step_items[-1]\n","\n","                front_probs = []\n","                for _, tokens in front_steps:\n","                    if tokens:\n","                        front_probs.append(sum(t[\"prob\"] for t in tokens) / len(tokens))\n","                if not front_probs:\n","                    continue\n","                front_avg = sum(front_probs) / len(front_probs)\n","\n","                last_tokens = last_step[1]\n","                if not last_tokens:\n","                    continue\n","                last_avg = sum(t[\"prob\"] for t in last_tokens) / len(last_tokens)\n","\n","                if front_avg != last_avg:\n","                    diff = round(last_avg - front_avg, 6)\n","                    combined_case_records.append({\n","                        \"qid\": qid,\n","                        \"sampling\": samp,\n","                        \"step_count\": len(step_items),\n","                        \"front_avg\": round(front_avg, 6),\n","                        \"last_avg\": round(last_avg, 6),\n","                        \"diff\": diff,\n","                        \"range\": range_tag\n","                    })\n","                    combined_diff_values.append(diff)\n","\n","# ✅ 保存合并结果为 JSON\n","with open(OUTPUT_JSON, \"w\") as f:\n","    json.dump(combined_case_records, f, indent=2)\n","\n","# ✅ 可视化总分布图\n","counts, bins = np.histogram(combined_diff_values, bins=20)\n","bin_centers = 0.5 * (bins[:-1] + bins[1:])\n","bin_width = bins[1] - bins[0]\n","\n","pos_counts = [c if bc > 0 else 0 for c, bc in zip(counts, bin_centers)]\n","neg_counts = [-c if bc < 0 else 0 for c, bc in zip(counts, bin_centers)]\n","\n","plt.figure(figsize=(8, 4))\n","plt.bar(bin_centers, pos_counts, width=bin_width, color='blue', label='last > front')\n","plt.bar(bin_centers, neg_counts, width=bin_width, color='red', label='last < front')\n","plt.axhline(0, color='black', linewidth=0.8)\n","plt.title(f\"(last_avg - front_avg) Distribution — Combined 201-600\")\n","plt.xlabel(\"last_avg - front_avg\")\n","plt.ylabel(\"Frequency (Signed)\")\n","plt.legend()\n","plt.grid(True)\n","plt.tight_layout()\n","plt.show()\n","\n","# ✅ 输出摘要\n","print(f\"[✓] 已处理数据段：{index_ranges}\")\n","print(f\"[✓] 总符合条件案例数量: {len(combined_case_records)}\")\n","print(f\"[✓] JSON 结果保存至: {OUTPUT_JSON}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":461},"id":"4ZUk--mr1RJ-","executionInfo":{"status":"ok","timestamp":1747563390203,"user_tz":-480,"elapsed":1455,"user":{"displayName":"Tingting Du","userId":"01262363838823204487"}},"outputId":"3c011c4a-239b-4810-a663-52e2b638ba22"},"execution_count":20,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["[✓] 已处理数据段：[(201, 300), (301, 400), (401, 600)]\n","[✓] 总符合条件案例数量: 303\n","[✓] JSON 结果保存至: /content/drive/MyDrive/Cluster-proj/output/stat_cluster_results/last_minus_front_wrong_cases_combined_201-600.json\n"]}]},{"cell_type":"code","source":["import numpy as np\n","\n","# ✅ 分组\n","diff_array = np.array(combined_diff_values)\n","neg_diffs = diff_array[diff_array < 0]\n","pos_diffs = diff_array[diff_array > 0]\n","\n","# ✅ 统计函数\n","def print_stats(name, data):\n","    print(f\"\\n--- {name} ({len(data)} cases) ---\")\n","    if len(data) == 0:\n","        print(\"No data.\")\n","        return\n","    print(f\"Mean:    {np.mean(data):.6f}\")\n","    print(f\"Median:  {np.median(data):.6f}\")\n","    print(f\"Std Dev: {np.std(data):.6f}\")\n","    print(f\"Min:     {np.min(data):.6f}\")\n","    print(f\"Max:     {np.max(data):.6f}\")\n","\n","# ✅ 输出统计\n","print_stats(\"NEGATIVE (last < front)\", neg_diffs)\n","print_stats(\"POSITIVE (last > front)\", pos_diffs)\n","\n","# ✅ 输出比例\n","total = len(diff_array)\n","neg_ratio = len(neg_diffs) / total * 100 if total else 0\n","pos_ratio = len(pos_diffs) / total * 100 if total else 0\n","print(f\"\\nTotal cases: {total}\")\n","print(f\"Negative %:  {neg_ratio:.2f}%\")\n","print(f\"Positive %:  {pos_ratio:.2f}%\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3foTi90h2C5S","executionInfo":{"status":"ok","timestamp":1747562542623,"user_tz":-480,"elapsed":9,"user":{"displayName":"Tingting Du","userId":"01262363838823204487"}},"outputId":"8cc58371-80ef-4884-b133-a7f750efdc7e"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","--- NEGATIVE (last < front) (104 cases) ---\n","Mean:    -0.041475\n","Median:  -0.032296\n","Std Dev: 0.041337\n","Min:     -0.260584\n","Max:     -0.001089\n","\n","--- POSITIVE (last > front) (199 cases) ---\n","Mean:    0.044545\n","Median:  0.042267\n","Std Dev: 0.030262\n","Min:     0.000498\n","Max:     0.160888\n","\n","Total cases: 303\n","Negative %:  34.32%\n","Positive %:  65.68%\n"]}]},{"cell_type":"code","source":["\n","import os\n","import json\n","import matplotlib.pyplot as plt\n","import numpy as np\n","\n","# ✅ 配置多个处理区间段\n","index_ranges = [(201, 300), (301, 400), (401, 600)]\n","# ✅ 输出路径\n","ERROR_SENTENCE_OUTPUT = f\"{BASE_PATH}/stat_cluster_results/invalid_reasoning/last_lt_front_wrong_step_sentences_201-600.json\"\n","\n","# ✅ 加载原始 step 结构（再次加载 logits_data + stat_data 分片）\n","sentence_results = []\n","\n","for start_index, end_index in index_ranges:\n","    range_tag = f\"{start_index}-{end_index}\"\n","    LOGITS_PATH = f\"{BASE_PATH}/deepseek7b-math-{range_tag}_with_steps.json\"\n","    STAT_PATH = f\"{BASE_PATH}/stat_logits/stat_logits_deepseek7b-math-{range_tag}.json\"\n","\n","    # 加载\n","    try:\n","        with open(LOGITS_PATH, 'r') as f:\n","            logits_data = json.load(f)\n","        with open(STAT_PATH, 'r') as f:\n","            stat_data = json.load(f)\n","    except Exception as e:\n","        print(f\"[!] Failed to load {range_tag}: {e}\")\n","        continue\n","\n","    for case in combined_case_records:\n","        if case[\"diff\"] >= 0:\n","            continue  # 只处理 last < front 的样本\n","        qid = case[\"qid\"]\n","        samp = case[\"sampling\"]\n","\n","        # 获取错误 step\n","        stat_entry = stat_data.get(qid, {}).get(\"wrong_sampling\", {}).get(samp, {})\n","        for vs_key, error_info in stat_entry.items():\n","            error_step = str(error_info.get(\"error_step\"))\n","            log_key = f\"{samp}_step_token_probs\"\n","            if qid not in logits_data or log_key not in logits_data[qid]:\n","                continue\n","            step_dict = logits_data[qid][log_key]\n","            if error_step not in step_dict:\n","                continue\n","\n","            # 拼接 token 成句子\n","            tokens = [t[\"token\"] for t in step_dict[error_step]]\n","            sentence = \" \".join(tokens).replace(\" ,\", \",\").replace(\" .\", \".\").replace(\" :\", \":\").replace(\" %\", \"%\")\n","\n","            sentence_results.append({\n","                \"qid\": qid,\n","                \"sampling\": samp,\n","                \"error_step\": error_step,\n","                \"sentence\": sentence,\n","                \"front_avg\": case[\"front_avg\"],\n","                \"last_avg\": case[\"last_avg\"],\n","                \"diff\": case[\"diff\"]\n","            })\n","\n","# ✅ 保存输出\n","with open(ERROR_SENTENCE_OUTPUT, \"w\") as f:\n","    json.dump(sentence_results, f, indent=2)\n","\n","print(f\"[✓] 错误 step 的完整句子已保存到: {ERROR_SENTENCE_OUTPUT}\")\n","print(f\"[✓] 总样本数: {len(sentence_results)}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"myQml5254pjZ","executionInfo":{"status":"ok","timestamp":1747563448578,"user_tz":-480,"elapsed":1138,"user":{"displayName":"Tingting Du","userId":"01262363838823204487"}},"outputId":"1d886067-d019-4e11-81b1-3e715ccca922"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["[✓] 错误 step 的完整句子已保存到: /content/drive/MyDrive/Cluster-proj/output/stat_cluster_results/invalid_reasoning/last_lt_front_wrong_step_sentences_201-600.json\n","[✓] 总样本数: 218\n"]}]},{"cell_type":"code","source":["# ✅ 输出文件路径\n","ERROR_TOKEN_PROB_PATH = f\"{BASE_PATH}/stat_cluster_results/token_with_prob_error_case_201-600.json\"\n","\n","token_prob_outputs = []\n","\n","for start_index, end_index in index_ranges:\n","    range_tag = f\"{start_index}-{end_index}\"\n","    LOGITS_PATH = f\"{BASE_PATH}/deepseek7b-math-{range_tag}_with_steps.json\"\n","    STAT_PATH = f\"{BASE_PATH}/stat_logits/stat_logits_deepseek7b-math-{range_tag}.json\"\n","\n","    try:\n","        with open(LOGITS_PATH, 'r') as f:\n","            logits_data = json.load(f)\n","        with open(STAT_PATH, 'r') as f:\n","            stat_data = json.load(f)\n","    except Exception as e:\n","        print(f\"[!] Failed to load {range_tag}: {e}\")\n","        continue\n","\n","    for case in combined_case_records:\n","        qid = case[\"qid\"]\n","        samp = case[\"sampling\"]\n","\n","        stat_entry = stat_data.get(qid, {}).get(\"wrong_sampling\", {}).get(samp, {})\n","        for vs_key, error_info in stat_entry.items():\n","            error_step = str(error_info.get(\"error_step\"))\n","            log_key = f\"{samp}_step_token_probs\"\n","            if qid not in logits_data or log_key not in logits_data[qid]:\n","                continue\n","            step_dict = logits_data[qid][log_key]\n","            if error_step not in step_dict:\n","                continue\n","\n","            token_items = [\n","                {\n","                    \"token\": t[\"token\"],\n","                    \"prob\": round(t[\"prob\"], 6)\n","                }\n","                for t in step_dict[error_step]\n","            ]\n","\n","            token_prob_outputs.append({\n","                \"qid\": qid,\n","                \"sampling\": samp,\n","                \"error_step\": error_step,\n","                \"tokens_with_prob\": token_items\n","            })\n","\n","# ✅ 保存输出 JSON\n","with open(ERROR_TOKEN_PROB_PATH, \"w\") as f:\n","    json.dump(token_prob_outputs, f, indent=2)\n","\n","print(f\"[✓] 已输出 token + prob（无重复 step 字段）到: {ERROR_TOKEN_PROB_PATH}\")\n","print(f\"[✓] 样本总数: {len(token_prob_outputs)}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wVjv7AzLJvNF","executionInfo":{"status":"ok","timestamp":1747567715893,"user_tz":-480,"elapsed":1410,"user":{"displayName":"Tingting Du","userId":"01262363838823204487"}},"outputId":"7d6d8858-ccc4-4e46-e569-a4ac66048400"},"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["[✓] 已输出 token + prob（无重复 step 字段）到: /content/drive/MyDrive/Cluster-proj/output/stat_cluster_results/token_with_prob_error_case_201-600.json\n","[✓] 样本总数: 218\n"]}]},{"cell_type":"code","source":["# ✅ 输出文件路径\n","ERROR_TOKEN_PROB_PATH = f\"{BASE_PATH}/stat_cluster_results/token_with_prob_error_case_201-600.json\"\n","\n","token_prob_outputs = []\n","\n","for start_index, end_index in index_ranges:\n","    range_tag = f\"{start_index}-{end_index}\"\n","    LOGITS_PATH = f\"{BASE_PATH}/deepseek7b-math-{range_tag}_with_steps.json\"\n","    STAT_PATH = f\"{BASE_PATH}/stat_logits/stat_logits_deepseek7b-math-{range_tag}.json\"\n","\n","    try:\n","        with open(LOGITS_PATH, 'r') as f:\n","            logits_data = json.load(f)\n","        with open(STAT_PATH, 'r') as f:\n","            stat_data = json.load(f)\n","    except Exception as e:\n","        print(f\"[!] Failed to load {range_tag}: {e}\")\n","        continue\n","\n","    for case in combined_case_records:\n","        if case[\"diff\"] >= 0:\n","            continue  # 只处理 last < front 的 case\n","        qid = case[\"qid\"]\n","        samp = case[\"sampling\"]\n","\n","        stat_entry = stat_data.get(qid, {}).get(\"wrong_sampling\", {}).get(samp, {})\n","        for vs_key, error_info in stat_entry.items():\n","            error_step = str(error_info.get(\"error_step\"))\n","            log_key = f\"{samp}_step_token_probs\"\n","            if qid not in logits_data or log_key not in logits_data[qid]:\n","                continue\n","            step_dict = logits_data[qid][log_key]\n","            if error_step not in step_dict:\n","                continue\n","\n","            token_items = [\n","                {\n","                    \"token\": t[\"token\"],\n","                    \"prob\": round(t[\"prob\"], 6)\n","                }\n","                for t in step_dict[error_step]\n","            ]\n","\n","            # ✅ 添加控制台打印\n","            print(f\"\\n[QID: {qid}]  [Sampling: {samp}]  [Error Step: {error_step}]\")\n","            print(\"Token\\t\\tProb\")\n","            print(\"-\" * 30)\n","            for item in token_items:\n","                print(f\"{item['token']:<16}\\t{item['prob']:.4f}\")\n","\n","            # ✅ 继续写入结果列表\n","            token_prob_outputs.append({\n","                \"qid\": qid,\n","                \"sampling\": samp,\n","                \"error_step\": error_step,\n","                \"tokens_with_prob\": token_items\n","            })\n","\n","# ✅ 保存输出 JSON\n","with open(ERROR_TOKEN_PROB_PATH, \"w\") as f:\n","    json.dump(token_prob_outputs, f, indent=2)\n","\n","print(f\"[✓] 已输出 token + prob 到: {ERROR_TOKEN_PROB_PATH}\")\n","print(f\"[✓] 样本总数: {len(token_prob_outputs)}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZcJYo7dtKlYM","executionInfo":{"status":"ok","timestamp":1747568007627,"user_tz":-480,"elapsed":3277,"user":{"displayName":"Tingting Du","userId":"01262363838823204487"}},"outputId":"addb5b68-10bc-4ccf-cad4-bf94f1b87cd1"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1;30;43m流式输出内容被截断，只能显示最后 5000 行内容。\u001b[0m\n","                \t1.0000\n","3               \t1.0000\n","0               \t1.0000\n","-               \t1.0000\n","5               \t1.0000\n","0               \t1.0000\n","years           \t1.0000\n","old             \t1.0000\n","from            \t1.0000\n","the             \t1.0000\n","total           \t1.0000\n","number          \t1.0000\n","of              \t1.0000\n","Judges          \t1.0000\n",".               \t0.7449\n","                \t1.0000\n","                \t1.0000\n","4               \t1.0000\n","0               \t1.0000\n","(               \t0.9330\n","total           \t1.0000\n","number          \t0.5319\n","of              \t1.0000\n","Judges          \t0.8564\n",")               \t1.0000\n","-               \t1.0000\n","                \t1.0000\n","4               \t1.0000\n","(               \t1.0000\n","Jud             \t0.9605\n","ges             \t1.0000\n","under           \t1.0000\n","                \t1.0000\n","3               \t1.0000\n","0               \t1.0000\n","years           \t0.7275\n","old             \t1.0000\n",")               \t1.0000\n","-               \t1.0000\n","                \t1.0000\n","2               \t1.0000\n","4               \t1.0000\n","(               \t1.0000\n","Jud             \t1.0000\n","ges             \t1.0000\n","between         \t1.0000\n","                \t1.0000\n","3               \t1.0000\n","0               \t1.0000\n","-               \t1.0000\n","5               \t1.0000\n","0               \t1.0000\n","years           \t1.0000\n","old             \t1.0000\n",")               \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","8               \t0.2341\n","Judges          \t1.0000\n","over            \t1.0000\n","                \t1.0000\n","5               \t1.0000\n","0               \t1.0000\n","years           \t1.0000\n","old             \t1.0000\n",".               \t1.0000\n","<｜end▁of▁sentence｜>\t0.2998\n","\n","[QID: q_95]  [Sampling: sampling1]  [Error Step: 3]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Michael         \t0.4663\n","originally      \t0.6706\n","had             \t0.7695\n","a               \t0.2603\n","certain         \t0.9210\n","number          \t0.7533\n","of              \t1.0000\n","match           \t1.0000\n","sticks          \t1.0000\n",".               \t0.8885\n","                \t1.0000\n","Now             \t0.1745\n","we              \t0.4928\n","know            \t0.3589\n","that            \t0.9579\n","Michael         \t0.9501\n","used            \t0.9302\n","                \t0.8451\n","3               \t1.0000\n","0               \t1.0000\n","0               \t1.0000\n","match           \t1.0000\n","sticks          \t1.0000\n","to              \t0.9561\n","create          \t0.8564\n","                \t0.3386\n","3               \t1.0000\n","0               \t1.0000\n","houses          \t0.4888\n",".               \t0.8267\n","To              \t0.7211\n","find            \t1.0000\n","out             \t0.5445\n","how             \t0.9272\n","many            \t1.0000\n","match           \t1.0000\n","sticks          \t1.0000\n","he              \t1.0000\n","originally      \t0.9384\n","had             \t1.0000\n",",               \t1.0000\n","we              \t1.0000\n","need            \t0.8571\n","to              \t1.0000\n","divide          \t0.1844\n","the             \t1.0000\n","total           \t1.0000\n","match           \t0.7186\n","sticks          \t1.0000\n","used            \t1.0000\n","(               \t0.7533\n","3               \t1.0000\n","0               \t1.0000\n","0               \t1.0000\n",")               \t1.0000\n","by              \t1.0000\n","the             \t1.0000\n","number          \t0.9272\n","of              \t1.0000\n","match           \t0.8618\n","sticks          \t1.0000\n","per             \t0.6411\n","house           \t1.0000\n","(               \t1.0000\n","1               \t1.0000\n","0               \t1.0000\n",").              \t0.9330\n","                \t1.0000\n","Original        \t0.5957\n","match           \t0.8451\n","sticks          \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","3               \t1.0000\n","0               \t1.0000\n","0               \t1.0000\n","match           \t1.0000\n","sticks          \t1.0000\n","/               \t1.0000\n","                \t1.0000\n","1               \t1.0000\n","0               \t1.0000\n","match           \t1.0000\n","sticks          \t1.0000\n","per             \t1.0000\n","house           \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","3               \t1.0000\n","0               \t1.0000\n","match           \t1.0000\n","sticks          \t1.0000\n","per             \t0.2426\n","house           \t1.0000\n","                \t1.0000\n","                \t1.0000\n","\n","[QID: q_95]  [Sampling: sampling1]  [Error Step: 3]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Michael         \t0.4663\n","originally      \t0.6706\n","had             \t0.7695\n","a               \t0.2603\n","certain         \t0.9210\n","number          \t0.7533\n","of              \t1.0000\n","match           \t1.0000\n","sticks          \t1.0000\n",".               \t0.8885\n","                \t1.0000\n","Now             \t0.1745\n","we              \t0.4928\n","know            \t0.3589\n","that            \t0.9579\n","Michael         \t0.9501\n","used            \t0.9302\n","                \t0.8451\n","3               \t1.0000\n","0               \t1.0000\n","0               \t1.0000\n","match           \t1.0000\n","sticks          \t1.0000\n","to              \t0.9561\n","create          \t0.8564\n","                \t0.3386\n","3               \t1.0000\n","0               \t1.0000\n","houses          \t0.4888\n",".               \t0.8267\n","To              \t0.7211\n","find            \t1.0000\n","out             \t0.5445\n","how             \t0.9272\n","many            \t1.0000\n","match           \t1.0000\n","sticks          \t1.0000\n","he              \t1.0000\n","originally      \t0.9384\n","had             \t1.0000\n",",               \t1.0000\n","we              \t1.0000\n","need            \t0.8571\n","to              \t1.0000\n","divide          \t0.1844\n","the             \t1.0000\n","total           \t1.0000\n","match           \t0.7186\n","sticks          \t1.0000\n","used            \t1.0000\n","(               \t0.7533\n","3               \t1.0000\n","0               \t1.0000\n","0               \t1.0000\n",")               \t1.0000\n","by              \t1.0000\n","the             \t1.0000\n","number          \t0.9272\n","of              \t1.0000\n","match           \t0.8618\n","sticks          \t1.0000\n","per             \t0.6411\n","house           \t1.0000\n","(               \t1.0000\n","1               \t1.0000\n","0               \t1.0000\n",").              \t0.9330\n","                \t1.0000\n","Original        \t0.5957\n","match           \t0.8451\n","sticks          \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","3               \t1.0000\n","0               \t1.0000\n","0               \t1.0000\n","match           \t1.0000\n","sticks          \t1.0000\n","/               \t1.0000\n","                \t1.0000\n","1               \t1.0000\n","0               \t1.0000\n","match           \t1.0000\n","sticks          \t1.0000\n","per             \t1.0000\n","house           \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","3               \t1.0000\n","0               \t1.0000\n","match           \t1.0000\n","sticks          \t1.0000\n","per             \t0.2426\n","house           \t1.0000\n","                \t1.0000\n","                \t1.0000\n","\n","[QID: q_19]  [Sampling: sampling2]  [Error Step: 1]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Calculate       \t0.5572\n","the             \t1.0000\n","total           \t0.9433\n","time            \t1.0000\n","spent           \t0.8480\n","on              \t1.0000\n","laundry         \t0.8489\n",",               \t0.6204\n","cleaning        \t0.9210\n","the             \t1.0000\n","bathroom        \t1.0000\n",",               \t1.0000\n","and             \t1.0000\n","doing           \t0.1330\n","homework        \t1.0000\n",".               \t1.0000\n","                \t1.0000\n","Total           \t0.8087\n","time            \t1.0000\n","spent           \t0.9445\n","on              \t0.8929\n","laundry         \t1.0000\n",",               \t0.9614\n","cleaning        \t1.0000\n","the             \t1.0000\n","bathroom        \t1.0000\n",",               \t1.0000\n","and             \t1.0000\n","doing           \t1.0000\n","homework        \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","3               \t1.0000\n","0               \t1.0000\n","minutes         \t0.9501\n","(               \t0.8135\n","la              \t1.0000\n","undry           \t1.0000\n",")               \t1.0000\n","+               \t1.0000\n","                \t1.0000\n","1               \t1.0000\n","5               \t1.0000\n","minutes         \t1.0000\n","(               \t1.0000\n","bath            \t0.5991\n","room            \t1.0000\n",")               \t1.0000\n","+               \t1.0000\n","                \t1.0000\n","4               \t1.0000\n","0               \t1.0000\n","minutes         \t1.0000\n","(               \t1.0000\n","home            \t1.0000\n","work            \t1.0000\n",")               \t1.0000\n","=               \t0.7924\n","                \t1.0000\n","7               \t1.0000\n","5               \t1.0000\n","minutes         \t1.0000\n","                \t0.6614\n","                \t1.0000\n","\n","[QID: q_40]  [Sampling: sampling1]  [Error Step: 8]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Subst           \t1.0000\n","ituting         \t0.5666\n","x               \t1.0000\n","=               \t0.9433\n","                \t1.0000\n","5               \t1.0000\n","into            \t0.7695\n","the             \t1.0000\n","equation        \t0.9714\n",":               \t0.0784\n","                \t1.0000\n","5               \t1.0000\n","+               \t1.0000\n","                \t1.0000\n","2               \t1.0000\n","(               \t1.0000\n","5               \t1.0000\n",")               \t1.0000\n","+               \t1.0000\n","                \t1.0000\n","3               \t1.0000\n","(               \t1.0000\n","5               \t1.0000\n",")               \t1.0000\n","+               \t1.0000\n","                \t1.0000\n","1               \t1.0000\n",".               \t1.0000\n","2               \t1.0000\n","(               \t1.0000\n","5               \t1.0000\n",")               \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","7               \t0.6070\n",".               \t1.0000\n","2               \t1.0000\n","(               \t0.9316\n","5               \t1.0000\n",")               \t1.0000\n","                \t0.2951\n","2               \t0.0820\n","5               \t1.0000\n","+               \t1.0000\n","                \t1.0000\n","1               \t1.0000\n","0               \t1.0000\n","+               \t1.0000\n","                \t1.0000\n","1               \t1.0000\n","5               \t1.0000\n","+               \t1.0000\n","                \t1.0000\n","6               \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","7               \t0.4733\n","2               \t0.5186\n","                \t1.0000\n","\n","[QID: q_87]  [Sampling: sampling1]  [Error Step: 3]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","To              \t0.5212\n","find            \t0.4886\n","out             \t0.1093\n","the             \t0.7002\n","total           \t1.0000\n","cost            \t0.7449\n","of              \t1.0000\n","the             \t1.0000\n","clothes         \t1.0000\n","she             \t0.5618\n","picked          \t0.9387\n","out             \t0.7924\n",",               \t1.0000\n","we              \t1.0000\n","can             \t0.1137\n","multiply        \t0.1949\n","the             \t1.0000\n","additional      \t0.5445\n","amount          \t0.5214\n","needed          \t0.6169\n","by              \t0.6098\n","the             \t0.9433\n","original        \t0.5848\n","cost            \t0.3635\n","of              \t0.3382\n","the             \t0.8796\n","clothes         \t0.9551\n",":               \t0.7926\n","$               \t1.0000\n","2               \t0.9210\n","0               \t1.0000\n","0               \t1.0000\n","*               \t0.9727\n","$               \t1.0000\n","5               \t1.0000\n","0               \t1.0000\n","0               \t1.0000\n","=               \t1.0000\n","$               \t1.0000\n","1               \t1.0000\n","0               \t1.0000\n",",               \t1.0000\n","0               \t1.0000\n","0               \t1.0000\n","0               \t1.0000\n",".               \t1.0000\n","                \t1.0000\n","\n","[QID: q_4]  [Sampling: sampling0]  [Error Step: 4]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Find            \t0.1948\n","the             \t0.9561\n","maximum         \t0.2278\n","number          \t1.0000\n","of              \t1.0000\n","boats           \t1.0000\n","that            \t1.0000\n","can             \t1.0000\n","race            \t0.2076\n",".               \t0.1798\n","                \t1.0000\n","Since           \t0.1716\n","the             \t1.0000\n","river           \t0.8525\n","is              \t1.0000\n","                \t1.0000\n","4               \t1.0000\n","2               \t1.0000\n","feet            \t1.0000\n","across          \t1.0000\n","and             \t0.1798\n","the             \t0.8061\n","total           \t0.9708\n","width           \t1.0000\n","needed          \t1.0000\n","is              \t0.9050\n","                \t0.9153\n","3               \t0.9445\n","feet            \t0.2902\n","per             \t0.3477\n","boat            \t1.0000\n","plus            \t0.6900\n","the             \t0.6871\n","spacing         \t0.2957\n","between         \t0.3760\n","and             \t0.9142\n","from            \t1.0000\n","the             \t1.0000\n","river           \t1.0000\n","bank            \t1.0000\n",",               \t1.0000\n","we              \t0.9272\n","can             \t1.0000\n","divide          \t0.1086\n","the             \t1.0000\n","total           \t0.3253\n","width           \t0.5991\n","needed          \t0.8182\n","by              \t1.0000\n","the             \t0.9272\n","boat            \t0.8330\n","width           \t1.0000\n",":               \t0.4711\n","                \t1.0000\n","(               \t0.1533\n","Number          \t0.8618\n","of              \t1.0000\n","boats           \t1.0000\n",")               \t1.0000\n","=               \t1.0000\n","(               \t1.0000\n","Total           \t0.9210\n","width           \t1.0000\n","needed          \t1.0000\n",")               \t1.0000\n","/               \t1.0000\n","(               \t0.6713\n","Bo              \t1.0000\n","at              \t1.0000\n","width           \t1.0000\n",")               \t1.0000\n","                \t1.0000\n","(               \t0.6907\n","Number          \t1.0000\n","of              \t1.0000\n","boats           \t1.0000\n",")               \t1.0000\n","=               \t1.0000\n","(               \t1.0000\n","4               \t0.9522\n","2               \t1.0000\n","feet            \t1.0000\n",")               \t0.6907\n","/               \t1.0000\n","(               \t0.5775\n","3               \t1.0000\n","feet            \t1.0000\n",")               \t0.9479\n","                \t1.0000\n","(               \t0.5223\n","Number          \t1.0000\n","of              \t1.0000\n","boats           \t1.0000\n",")               \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","1               \t1.0000\n","4               \t1.0000\n","                \t0.5883\n","                \t1.0000\n","Answer          \t0.8324\n",":               \t1.0000\n","                \t0.9543\n","1               \t1.0000\n","4               \t1.0000\n","boats           \t1.0000\n","can             \t1.0000\n","race            \t1.0000\n","in              \t1.0000\n","the             \t0.7773\n","river           \t0.9069\n",".               \t0.9445\n","<｜end▁of▁sentence｜>\t1.0000\n","\n","[QID: q_4]  [Sampling: sampling2]  [Error Step: 1]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Determine       \t0.5860\n","the             \t1.0000\n","total           \t0.7592\n","space           \t0.5697\n","required        \t0.3024\n","for             \t0.9357\n","one             \t0.9302\n","boat            \t1.0000\n",".               \t0.4644\n","                \t1.0000\n","Each            \t0.1902\n","boat            \t1.0000\n","occupies        \t0.1156\n","an              \t0.2625\n","area            \t1.0000\n","of              \t1.0000\n","                \t1.0000\n","3               \t1.0000\n","feet            \t1.0000\n","by              \t0.4943\n","                \t1.0000\n","3               \t1.0000\n","feet            \t1.0000\n",",               \t0.9106\n","which           \t0.5557\n","is              \t0.6482\n","                \t0.4610\n","9               \t0.6045\n","square          \t1.0000\n","feet            \t1.0000\n",".               \t1.0000\n","                \t1.0000\n","                \t1.0000\n","\n","[QID: q_14]  [Sampling: sampling2]  [Error Step: 4]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Calculate       \t1.0000\n","the             \t1.0000\n","weight          \t1.0000\n","at              \t1.0000\n","one             \t0.8330\n","year            \t1.0000\n","old             \t1.0000\n","(               \t0.6098\n","5               \t0.9106\n","2               \t1.0000\n","weeks           \t1.0000\n",").              \t1.0000\n","                \t1.0000\n","The             \t1.0000\n","weight          \t1.0000\n","at              \t1.0000\n","                \t1.0000\n","5               \t1.0000\n","months          \t1.0000\n","old             \t1.0000\n","was             \t1.0000\n","                \t1.0000\n","4               \t1.0000\n","8               \t1.0000\n","pounds          \t1.0000\n",",               \t1.0000\n","so              \t1.0000\n","the             \t1.0000\n","weight          \t1.0000\n","at              \t1.0000\n","one             \t1.0000\n","year            \t1.0000\n","old             \t1.0000\n","(               \t1.0000\n","5               \t1.0000\n","2               \t1.0000\n","weeks           \t1.0000\n",")               \t1.0000\n","is              \t1.0000\n","                \t1.0000\n","4               \t1.0000\n","8               \t1.0000\n","pounds          \t1.0000\n","*               \t1.0000\n","                \t1.0000\n","2               \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","9               \t1.0000\n","6               \t1.0000\n","pounds          \t1.0000\n",".               \t1.0000\n","                \t1.0000\n","                \t1.0000\n","\n","[QID: q_14]  [Sampling: sampling2]  [Error Step: 4]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Calculate       \t1.0000\n","the             \t1.0000\n","weight          \t1.0000\n","at              \t1.0000\n","one             \t0.8330\n","year            \t1.0000\n","old             \t1.0000\n","(               \t0.6098\n","5               \t0.9106\n","2               \t1.0000\n","weeks           \t1.0000\n",").              \t1.0000\n","                \t1.0000\n","The             \t1.0000\n","weight          \t1.0000\n","at              \t1.0000\n","                \t1.0000\n","5               \t1.0000\n","months          \t1.0000\n","old             \t1.0000\n","was             \t1.0000\n","                \t1.0000\n","4               \t1.0000\n","8               \t1.0000\n","pounds          \t1.0000\n",",               \t1.0000\n","so              \t1.0000\n","the             \t1.0000\n","weight          \t1.0000\n","at              \t1.0000\n","one             \t1.0000\n","year            \t1.0000\n","old             \t1.0000\n","(               \t1.0000\n","5               \t1.0000\n","2               \t1.0000\n","weeks           \t1.0000\n",")               \t1.0000\n","is              \t1.0000\n","                \t1.0000\n","4               \t1.0000\n","8               \t1.0000\n","pounds          \t1.0000\n","*               \t1.0000\n","                \t1.0000\n","2               \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","9               \t1.0000\n","6               \t1.0000\n","pounds          \t1.0000\n",".               \t1.0000\n","                \t1.0000\n","                \t1.0000\n","\n","[QID: q_14]  [Sampling: sampling2]  [Error Step: 4]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Calculate       \t1.0000\n","the             \t1.0000\n","weight          \t1.0000\n","at              \t1.0000\n","one             \t0.8330\n","year            \t1.0000\n","old             \t1.0000\n","(               \t0.6098\n","5               \t0.9106\n","2               \t1.0000\n","weeks           \t1.0000\n",").              \t1.0000\n","                \t1.0000\n","The             \t1.0000\n","weight          \t1.0000\n","at              \t1.0000\n","                \t1.0000\n","5               \t1.0000\n","months          \t1.0000\n","old             \t1.0000\n","was             \t1.0000\n","                \t1.0000\n","4               \t1.0000\n","8               \t1.0000\n","pounds          \t1.0000\n",",               \t1.0000\n","so              \t1.0000\n","the             \t1.0000\n","weight          \t1.0000\n","at              \t1.0000\n","one             \t1.0000\n","year            \t1.0000\n","old             \t1.0000\n","(               \t1.0000\n","5               \t1.0000\n","2               \t1.0000\n","weeks           \t1.0000\n",")               \t1.0000\n","is              \t1.0000\n","                \t1.0000\n","4               \t1.0000\n","8               \t1.0000\n","pounds          \t1.0000\n","*               \t1.0000\n","                \t1.0000\n","2               \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","9               \t1.0000\n","6               \t1.0000\n","pounds          \t1.0000\n",".               \t1.0000\n","                \t1.0000\n","                \t1.0000\n","\n","[QID: q_14]  [Sampling: sampling2]  [Error Step: 4]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Calculate       \t1.0000\n","the             \t1.0000\n","weight          \t1.0000\n","at              \t1.0000\n","one             \t0.8330\n","year            \t1.0000\n","old             \t1.0000\n","(               \t0.6098\n","5               \t0.9106\n","2               \t1.0000\n","weeks           \t1.0000\n",").              \t1.0000\n","                \t1.0000\n","The             \t1.0000\n","weight          \t1.0000\n","at              \t1.0000\n","                \t1.0000\n","5               \t1.0000\n","months          \t1.0000\n","old             \t1.0000\n","was             \t1.0000\n","                \t1.0000\n","4               \t1.0000\n","8               \t1.0000\n","pounds          \t1.0000\n",",               \t1.0000\n","so              \t1.0000\n","the             \t1.0000\n","weight          \t1.0000\n","at              \t1.0000\n","one             \t1.0000\n","year            \t1.0000\n","old             \t1.0000\n","(               \t1.0000\n","5               \t1.0000\n","2               \t1.0000\n","weeks           \t1.0000\n",")               \t1.0000\n","is              \t1.0000\n","                \t1.0000\n","4               \t1.0000\n","8               \t1.0000\n","pounds          \t1.0000\n","*               \t1.0000\n","                \t1.0000\n","2               \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","9               \t1.0000\n","6               \t1.0000\n","pounds          \t1.0000\n",".               \t1.0000\n","                \t1.0000\n","                \t1.0000\n","\n","[QID: q_17]  [Sampling: sampling0]  [Error Step: 3]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Ken             \t0.8907\n","gave            \t1.0000\n","ten             \t1.0000\n","more            \t1.0000\n","pencils         \t1.0000\n","to              \t1.0000\n","N               \t1.0000\n","ilo             \t1.0000\n","than            \t1.0000\n","he              \t1.0000\n","gave            \t1.0000\n","to              \t1.0000\n","M               \t1.0000\n","anny            \t1.0000\n",",               \t0.4334\n","which           \t0.2725\n","means           \t1.0000\n","he              \t0.7615\n","gave            \t1.0000\n","M               \t0.8451\n","anny            \t1.0000\n","ten             \t0.8770\n","pencils         \t1.0000\n","and             \t0.8391\n","N               \t1.0000\n","ilo             \t1.0000\n","ten             \t0.3226\n","more            \t0.6285\n","pencils         \t1.0000\n",",               \t0.6907\n","a               \t0.4553\n","total           \t1.0000\n","of              \t1.0000\n","ten             \t0.9561\n","+               \t1.0000\n","ten             \t1.0000\n","=               \t0.9106\n","twenty          \t1.0000\n","pencils         \t0.6907\n",".               \t1.0000\n","                \t1.0000\n","\n","[QID: q_17]  [Sampling: sampling0]  [Error Step: 3]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Ken             \t0.8907\n","gave            \t1.0000\n","ten             \t1.0000\n","more            \t1.0000\n","pencils         \t1.0000\n","to              \t1.0000\n","N               \t1.0000\n","ilo             \t1.0000\n","than            \t1.0000\n","he              \t1.0000\n","gave            \t1.0000\n","to              \t1.0000\n","M               \t1.0000\n","anny            \t1.0000\n",",               \t0.4334\n","which           \t0.2725\n","means           \t1.0000\n","he              \t0.7615\n","gave            \t1.0000\n","M               \t0.8451\n","anny            \t1.0000\n","ten             \t0.8770\n","pencils         \t1.0000\n","and             \t0.8391\n","N               \t1.0000\n","ilo             \t1.0000\n","ten             \t0.3226\n","more            \t0.6285\n","pencils         \t1.0000\n",",               \t0.6907\n","a               \t0.4553\n","total           \t1.0000\n","of              \t1.0000\n","ten             \t0.9561\n","+               \t1.0000\n","ten             \t1.0000\n","=               \t0.9106\n","twenty          \t1.0000\n","pencils         \t0.6907\n",".               \t1.0000\n","                \t1.0000\n","\n","[QID: q_17]  [Sampling: sampling0]  [Error Step: 3]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Ken             \t0.8907\n","gave            \t1.0000\n","ten             \t1.0000\n","more            \t1.0000\n","pencils         \t1.0000\n","to              \t1.0000\n","N               \t1.0000\n","ilo             \t1.0000\n","than            \t1.0000\n","he              \t1.0000\n","gave            \t1.0000\n","to              \t1.0000\n","M               \t1.0000\n","anny            \t1.0000\n",",               \t0.4334\n","which           \t0.2725\n","means           \t1.0000\n","he              \t0.7615\n","gave            \t1.0000\n","M               \t0.8451\n","anny            \t1.0000\n","ten             \t0.8770\n","pencils         \t1.0000\n","and             \t0.8391\n","N               \t1.0000\n","ilo             \t1.0000\n","ten             \t0.3226\n","more            \t0.6285\n","pencils         \t1.0000\n",",               \t0.6907\n","a               \t0.4553\n","total           \t1.0000\n","of              \t1.0000\n","ten             \t0.9561\n","+               \t1.0000\n","ten             \t1.0000\n","=               \t0.9106\n","twenty          \t1.0000\n","pencils         \t0.6907\n",".               \t1.0000\n","                \t1.0000\n","\n","[QID: q_17]  [Sampling: sampling0]  [Error Step: 3]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Ken             \t0.8907\n","gave            \t1.0000\n","ten             \t1.0000\n","more            \t1.0000\n","pencils         \t1.0000\n","to              \t1.0000\n","N               \t1.0000\n","ilo             \t1.0000\n","than            \t1.0000\n","he              \t1.0000\n","gave            \t1.0000\n","to              \t1.0000\n","M               \t1.0000\n","anny            \t1.0000\n",",               \t0.4334\n","which           \t0.2725\n","means           \t1.0000\n","he              \t0.7615\n","gave            \t1.0000\n","M               \t0.8451\n","anny            \t1.0000\n","ten             \t0.8770\n","pencils         \t1.0000\n","and             \t0.8391\n","N               \t1.0000\n","ilo             \t1.0000\n","ten             \t0.3226\n","more            \t0.6285\n","pencils         \t1.0000\n",",               \t0.6907\n","a               \t0.4553\n","total           \t1.0000\n","of              \t1.0000\n","ten             \t0.9561\n","+               \t1.0000\n","ten             \t1.0000\n","=               \t0.9106\n","twenty          \t1.0000\n","pencils         \t0.6907\n",".               \t1.0000\n","                \t1.0000\n","\n","[QID: q_22]  [Sampling: sampling2]  [Error Step: 3]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Calculate       \t0.2151\n","the             \t1.0000\n","total           \t1.0000\n","cost            \t1.0000\n","of              \t1.0000\n","all             \t0.6388\n","items           \t0.5223\n",".               \t0.5224\n","                \t1.0000\n","The             \t0.5653\n","total           \t1.0000\n","cost            \t1.0000\n","of              \t1.0000\n","bananas         \t0.4778\n",",               \t1.0000\n","pears           \t1.0000\n",",               \t1.0000\n","and             \t0.8508\n","asparagus       \t1.0000\n","is              \t1.0000\n","                \t1.0000\n","€               \t1.0000\n","8               \t1.0000\n","+               \t0.8996\n","                \t1.0000\n","€               \t1.0000\n","8               \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","€               \t1.0000\n","1               \t1.0000\n","6               \t1.0000\n",".               \t1.0000\n","                \t1.0000\n","                \t1.0000\n","\n","[QID: q_22]  [Sampling: sampling2]  [Error Step: 3]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Calculate       \t0.2151\n","the             \t1.0000\n","total           \t1.0000\n","cost            \t1.0000\n","of              \t1.0000\n","all             \t0.6388\n","items           \t0.5223\n",".               \t0.5224\n","                \t1.0000\n","The             \t0.5653\n","total           \t1.0000\n","cost            \t1.0000\n","of              \t1.0000\n","bananas         \t0.4778\n",",               \t1.0000\n","pears           \t1.0000\n",",               \t1.0000\n","and             \t0.8508\n","asparagus       \t1.0000\n","is              \t1.0000\n","                \t1.0000\n","€               \t1.0000\n","8               \t1.0000\n","+               \t0.8996\n","                \t1.0000\n","€               \t1.0000\n","8               \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","€               \t1.0000\n","1               \t1.0000\n","6               \t1.0000\n",".               \t1.0000\n","                \t1.0000\n","                \t1.0000\n","\n","[QID: q_22]  [Sampling: sampling2]  [Error Step: 3]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Calculate       \t0.2151\n","the             \t1.0000\n","total           \t1.0000\n","cost            \t1.0000\n","of              \t1.0000\n","all             \t0.6388\n","items           \t0.5223\n",".               \t0.5224\n","                \t1.0000\n","The             \t0.5653\n","total           \t1.0000\n","cost            \t1.0000\n","of              \t1.0000\n","bananas         \t0.4778\n",",               \t1.0000\n","pears           \t1.0000\n",",               \t1.0000\n","and             \t0.8508\n","asparagus       \t1.0000\n","is              \t1.0000\n","                \t1.0000\n","€               \t1.0000\n","8               \t1.0000\n","+               \t0.8996\n","                \t1.0000\n","€               \t1.0000\n","8               \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","€               \t1.0000\n","1               \t1.0000\n","6               \t1.0000\n",".               \t1.0000\n","                \t1.0000\n","                \t1.0000\n","\n","[QID: q_22]  [Sampling: sampling2]  [Error Step: 3]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Calculate       \t0.2151\n","the             \t1.0000\n","total           \t1.0000\n","cost            \t1.0000\n","of              \t1.0000\n","all             \t0.6388\n","items           \t0.5223\n",".               \t0.5224\n","                \t1.0000\n","The             \t0.5653\n","total           \t1.0000\n","cost            \t1.0000\n","of              \t1.0000\n","bananas         \t0.4778\n",",               \t1.0000\n","pears           \t1.0000\n",",               \t1.0000\n","and             \t0.8508\n","asparagus       \t1.0000\n","is              \t1.0000\n","                \t1.0000\n","€               \t1.0000\n","8               \t1.0000\n","+               \t0.8996\n","                \t1.0000\n","€               \t1.0000\n","8               \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","€               \t1.0000\n","1               \t1.0000\n","6               \t1.0000\n",".               \t1.0000\n","                \t1.0000\n","                \t1.0000\n","\n","[QID: q_33]  [Sampling: sampling1]  [Error Step: 2]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Calculate       \t0.7849\n","the             \t1.0000\n","total           \t0.8817\n","number          \t1.0000\n","of              \t1.0000\n","hair            \t1.0000\n","cl              \t1.0000\n","ipp             \t1.0000\n","ings            \t1.0000\n","collected       \t0.3887\n","so              \t0.6411\n","far             \t1.0000\n",".               \t1.0000\n","                \t1.0000\n","Cal             \t0.9614\n","vin             \t1.0000\n","has             \t1.0000\n","already         \t0.0951\n","gotten          \t0.8223\n","                \t1.0000\n","8               \t1.0000\n","hairc           \t1.0000\n","uts             \t1.0000\n",",               \t1.0000\n","and             \t0.0273\n","he              \t1.0000\n","needs           \t0.9542\n","                \t1.0000\n","2               \t1.0000\n","more            \t1.0000\n","hairc           \t0.4430\n","uts             \t1.0000\n","to              \t1.0000\n","reach           \t1.0000\n","his             \t1.0000\n","goal            \t1.0000\n",".               \t1.0000\n","Therefore       \t0.2875\n",",               \t1.0000\n","the             \t0.0670\n","total           \t1.0000\n","number          \t1.0000\n","of              \t1.0000\n","hair            \t1.0000\n","cl              \t1.0000\n","ipp             \t1.0000\n","ings            \t1.0000\n","collected       \t1.0000\n","so              \t0.7695\n","far             \t1.0000\n","is              \t1.0000\n","                \t1.0000\n","8               \t1.0000\n","+               \t0.9445\n","                \t1.0000\n","2               \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","1               \t1.0000\n","0               \t1.0000\n",".               \t0.8840\n","                \t1.0000\n","                \t1.0000\n","\n","[QID: q_37]  [Sampling: sampling2]  [Error Step: 5]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Calculate       \t0.1424\n","the             \t1.0000\n","final           \t0.2895\n","answer          \t0.9501\n",".               \t0.9499\n","                \t1.0000\n","Answer          \t0.8600\n",":               \t0.5666\n","Difference      \t0.3948\n","=               \t1.0000\n","                \t0.8794\n","2               \t1.0000\n","6               \t1.0000\n","mm              \t1.0000\n","(               \t0.1464\n","rain            \t1.0000\n","at              \t1.0000\n","house           \t1.0000\n",")               \t1.0000\n","-               \t1.0000\n","(               \t1.0000\n","3               \t1.0000\n","mm              \t1.0000\n","+               \t1.0000\n","                \t1.0000\n","6               \t1.0000\n","mm              \t1.0000\n","+               \t1.0000\n","                \t1.0000\n","5               \t1.0000\n","mm              \t1.0000\n",")               \t1.0000\n","                \t0.6256\n","                \t0.4640\n","Conclusion      \t0.3485\n",":               \t1.0000\n","Greg            \t0.7980\n","experienced     \t1.0000\n","                \t1.0000\n","1               \t0.7905\n","4               \t0.3986\n","mm              \t1.0000\n","less            \t1.0000\n","rain            \t1.0000\n","while           \t0.9069\n","camping         \t1.0000\n","than            \t0.0491\n","at              \t0.8146\n","his             \t1.0000\n","house           \t1.0000\n",".               \t0.7953\n","<｜end▁of▁sentence｜>\t1.0000\n","\n","[QID: q_37]  [Sampling: sampling2]  [Error Step: 4]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Calculate       \t0.6981\n","the             \t1.0000\n","difference      \t0.9445\n","between         \t1.0000\n","the             \t1.0000\n","rain            \t0.9433\n","at              \t1.0000\n","Greg            \t1.0000\n","'               \t1.0000\n","s               \t1.0000\n","house           \t1.0000\n","and             \t1.0000\n","the             \t1.0000\n","camping         \t0.9614\n","trip            \t1.0000\n","total           \t0.8770\n","rain            \t1.0000\n",".               \t1.0000\n","                \t1.0000\n","Difference      \t1.0000\n","=               \t0.9293\n","Rain            \t0.3796\n","at              \t1.0000\n","house           \t1.0000\n","-               \t0.9433\n","Total           \t1.0000\n","rain            \t1.0000\n","during          \t1.0000\n","camping         \t1.0000\n","trip            \t1.0000\n","                \t1.0000\n","                \t1.0000\n","\n","[QID: q_37]  [Sampling: sampling2]  [Error Step: 5]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Calculate       \t0.1424\n","the             \t1.0000\n","final           \t0.2895\n","answer          \t0.9501\n",".               \t0.9499\n","                \t1.0000\n","Answer          \t0.8600\n",":               \t0.5666\n","Difference      \t0.3948\n","=               \t1.0000\n","                \t0.8794\n","2               \t1.0000\n","6               \t1.0000\n","mm              \t1.0000\n","(               \t0.1464\n","rain            \t1.0000\n","at              \t1.0000\n","house           \t1.0000\n",")               \t1.0000\n","-               \t1.0000\n","(               \t1.0000\n","3               \t1.0000\n","mm              \t1.0000\n","+               \t1.0000\n","                \t1.0000\n","6               \t1.0000\n","mm              \t1.0000\n","+               \t1.0000\n","                \t1.0000\n","5               \t1.0000\n","mm              \t1.0000\n",")               \t1.0000\n","                \t0.6256\n","                \t0.4640\n","Conclusion      \t0.3485\n",":               \t1.0000\n","Greg            \t0.7980\n","experienced     \t1.0000\n","                \t1.0000\n","1               \t0.7905\n","4               \t0.3986\n","mm              \t1.0000\n","less            \t1.0000\n","rain            \t1.0000\n","while           \t0.9069\n","camping         \t1.0000\n","than            \t0.0491\n","at              \t0.8146\n","his             \t1.0000\n","house           \t1.0000\n",".               \t0.7953\n","<｜end▁of▁sentence｜>\t1.0000\n","\n","[QID: q_37]  [Sampling: sampling2]  [Error Step: 4]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Calculate       \t0.6981\n","the             \t1.0000\n","difference      \t0.9445\n","between         \t1.0000\n","the             \t1.0000\n","rain            \t0.9433\n","at              \t1.0000\n","Greg            \t1.0000\n","'               \t1.0000\n","s               \t1.0000\n","house           \t1.0000\n","and             \t1.0000\n","the             \t1.0000\n","camping         \t0.9614\n","trip            \t1.0000\n","total           \t0.8770\n","rain            \t1.0000\n",".               \t1.0000\n","                \t1.0000\n","Difference      \t1.0000\n","=               \t0.9293\n","Rain            \t0.3796\n","at              \t1.0000\n","house           \t1.0000\n","-               \t0.9433\n","Total           \t1.0000\n","rain            \t1.0000\n","during          \t1.0000\n","camping         \t1.0000\n","trip            \t1.0000\n","                \t1.0000\n","                \t1.0000\n","\n","[QID: q_53]  [Sampling: sampling1]  [Error Step: 1]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Calculate       \t0.5298\n","the             \t1.0000\n","total           \t1.0000\n","duration        \t0.7302\n","of              \t1.0000\n","the             \t1.0000\n","new             \t0.9302\n","sc              \t1.0000\n","ast             \t1.0000\n",".               \t0.7959\n","                \t1.0000\n","Total           \t0.6831\n","duration        \t1.0000\n","=               \t1.0000\n","                \t0.9176\n","1               \t1.0000\n","2               \t1.0000\n","minutes         \t1.0000\n","(               \t1.0000\n","national        \t1.0000\n","news            \t1.0000\n",")               \t1.0000\n","+               \t1.0000\n","                \t1.0000\n","5               \t1.0000\n","minutes         \t1.0000\n","(               \t1.0000\n","international   \t1.0000\n","news            \t1.0000\n",")               \t1.0000\n","+               \t1.0000\n","                \t1.0000\n","5               \t1.0000\n","minutes         \t1.0000\n","(               \t1.0000\n","sports          \t1.0000\n",")               \t1.0000\n","+               \t1.0000\n","                \t1.0000\n","2               \t1.0000\n","minutes         \t1.0000\n","(               \t1.0000\n","weather         \t1.0000\n","forecasts       \t1.0000\n",")               \t1.0000\n","                \t1.0000\n","Total           \t0.2151\n","duration        \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","1               \t0.5445\n","2               \t1.0000\n","+               \t1.0000\n","                \t1.0000\n","5               \t1.0000\n","+               \t1.0000\n","                \t1.0000\n","5               \t1.0000\n","+               \t1.0000\n","                \t1.0000\n","2               \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","2               \t1.0000\n","4               \t1.0000\n","minutes         \t1.0000\n","                \t1.0000\n","                \t1.0000\n","\n","[QID: q_53]  [Sampling: sampling1]  [Error Step: 2]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Calculate       \t0.7589\n","the             \t1.0000\n","duration        \t1.0000\n","of              \t1.0000\n","the             \t0.9316\n","remaining       \t0.0372\n","time            \t0.7055\n","after           \t0.6907\n","excluding       \t0.6923\n","the             \t0.8582\n","news            \t0.3043\n","segments        \t0.3540\n",".               \t0.9542\n","                \t1.0000\n","Remaining       \t1.0000\n","duration        \t0.5112\n","=               \t1.0000\n","Total           \t0.9176\n","duration        \t1.0000\n","-               \t1.0000\n","(               \t0.3287\n","1               \t0.9744\n","2               \t1.0000\n","+               \t0.8618\n","                \t1.0000\n","5               \t1.0000\n","+               \t1.0000\n","                \t1.0000\n","5               \t1.0000\n","+               \t1.0000\n","                \t1.0000\n","2               \t1.0000\n",")               \t1.0000\n","                \t0.9597\n","Remaining       \t1.0000\n","duration        \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","2               \t1.0000\n","4               \t1.0000\n","-               \t0.9409\n","                \t1.0000\n","2               \t1.0000\n","5               \t0.3204\n","                \t0.9193\n","Remaining       \t0.7186\n","duration        \t1.0000\n","=               \t1.0000\n","-               \t1.0000\n","1               \t1.0000\n","minute          \t1.0000\n","                \t1.0000\n","                \t1.0000\n","\n","[QID: q_53]  [Sampling: sampling1]  [Error Step: 1]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Calculate       \t0.5298\n","the             \t1.0000\n","total           \t1.0000\n","duration        \t0.7302\n","of              \t1.0000\n","the             \t1.0000\n","new             \t0.9302\n","sc              \t1.0000\n","ast             \t1.0000\n",".               \t0.7959\n","                \t1.0000\n","Total           \t0.6831\n","duration        \t1.0000\n","=               \t1.0000\n","                \t0.9176\n","1               \t1.0000\n","2               \t1.0000\n","minutes         \t1.0000\n","(               \t1.0000\n","national        \t1.0000\n","news            \t1.0000\n",")               \t1.0000\n","+               \t1.0000\n","                \t1.0000\n","5               \t1.0000\n","minutes         \t1.0000\n","(               \t1.0000\n","international   \t1.0000\n","news            \t1.0000\n",")               \t1.0000\n","+               \t1.0000\n","                \t1.0000\n","5               \t1.0000\n","minutes         \t1.0000\n","(               \t1.0000\n","sports          \t1.0000\n",")               \t1.0000\n","+               \t1.0000\n","                \t1.0000\n","2               \t1.0000\n","minutes         \t1.0000\n","(               \t1.0000\n","weather         \t1.0000\n","forecasts       \t1.0000\n",")               \t1.0000\n","                \t1.0000\n","Total           \t0.2151\n","duration        \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","1               \t0.5445\n","2               \t1.0000\n","+               \t1.0000\n","                \t1.0000\n","5               \t1.0000\n","+               \t1.0000\n","                \t1.0000\n","5               \t1.0000\n","+               \t1.0000\n","                \t1.0000\n","2               \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","2               \t1.0000\n","4               \t1.0000\n","minutes         \t1.0000\n","                \t1.0000\n","                \t1.0000\n","\n","[QID: q_53]  [Sampling: sampling1]  [Error Step: 2]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Calculate       \t0.7589\n","the             \t1.0000\n","duration        \t1.0000\n","of              \t1.0000\n","the             \t0.9316\n","remaining       \t0.0372\n","time            \t0.7055\n","after           \t0.6907\n","excluding       \t0.6923\n","the             \t0.8582\n","news            \t0.3043\n","segments        \t0.3540\n",".               \t0.9542\n","                \t1.0000\n","Remaining       \t1.0000\n","duration        \t0.5112\n","=               \t1.0000\n","Total           \t0.9176\n","duration        \t1.0000\n","-               \t1.0000\n","(               \t0.3287\n","1               \t0.9744\n","2               \t1.0000\n","+               \t0.8618\n","                \t1.0000\n","5               \t1.0000\n","+               \t1.0000\n","                \t1.0000\n","5               \t1.0000\n","+               \t1.0000\n","                \t1.0000\n","2               \t1.0000\n",")               \t1.0000\n","                \t0.9597\n","Remaining       \t1.0000\n","duration        \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","2               \t1.0000\n","4               \t1.0000\n","-               \t0.9409\n","                \t1.0000\n","2               \t1.0000\n","5               \t0.3204\n","                \t0.9193\n","Remaining       \t0.7186\n","duration        \t1.0000\n","=               \t1.0000\n","-               \t1.0000\n","1               \t1.0000\n","minute          \t1.0000\n","                \t1.0000\n","                \t1.0000\n","\n","[QID: q_69]  [Sampling: sampling2]  [Error Step: 3]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Calculate       \t0.7533\n","the             \t1.0000\n","number          \t0.8950\n","of              \t1.0000\n","overtime        \t1.0000\n","hours           \t1.0000\n","worked          \t1.0000\n",".               \t1.0000\n","                \t1.0000\n","Gary            \t0.9479\n","earned          \t0.1436\n","$               \t0.7533\n","1               \t1.0000\n","5               \t1.0000\n","per             \t0.8310\n","hour            \t0.9479\n","for             \t0.9721\n","overtime        \t1.0000\n","(               \t0.0894\n","1               \t1.0000\n",".               \t1.0000\n","5               \t1.0000\n","times           \t1.0000\n","his             \t1.0000\n","normal          \t0.9457\n","wage            \t1.0000\n","),              \t0.0439\n","and             \t0.5223\n","he              \t0.9210\n","earned          \t0.9142\n","$               \t0.9142\n","2               \t1.0000\n","1               \t1.0000\n","6               \t1.0000\n","in              \t0.6626\n","overtime        \t1.0000\n","pay             \t0.9106\n",".               \t1.0000\n","                \t1.0000\n","O               \t1.0000\n","vert            \t1.0000\n","ime             \t1.0000\n","hours           \t1.0000\n","=               \t1.0000\n","$               \t1.0000\n","2               \t1.0000\n","1               \t1.0000\n","6               \t1.0000\n","(               \t1.0000\n","over            \t1.0000\n","time            \t1.0000\n","pay             \t1.0000\n",")               \t1.0000\n","                \t0.6614\n","�               \t1.0000\n","$               \t1.0000\n","1               \t1.0000\n","5               \t1.0000\n","/               \t1.0000\n","hour            \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","1               \t1.0000\n","4               \t1.0000\n",".               \t0.5556\n","4               \t1.0000\n","hours           \t0.7275\n","                \t0.7887\n","                \t0.5167\n","\n","[QID: q_73]  [Sampling: sampling2]  [Error Step: 4]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Sub             \t1.0000\n","tract           \t1.0000\n","the             \t1.0000\n","number          \t1.0000\n","of              \t1.0000\n","members         \t1.0000\n","who             \t1.0000\n","ordered         \t1.0000\n","mango           \t1.0000\n","juice           \t1.0000\n","from            \t0.9272\n","the             \t1.0000\n","total           \t0.5339\n","number          \t0.9176\n","of              \t1.0000\n","remaining       \t1.0000\n","members         \t1.0000\n","to              \t1.0000\n","find            \t1.0000\n","the             \t1.0000\n","number          \t1.0000\n","of              \t1.0000\n","members         \t1.0000\n","who             \t1.0000\n","ordered         \t1.0000\n","orange          \t1.0000\n","juice           \t1.0000\n",".               \t1.0000\n","                \t1.0000\n","Members         \t1.0000\n","who             \t1.0000\n","ordered         \t1.0000\n","orange          \t1.0000\n","juice           \t1.0000\n","=               \t1.0000\n","Rem             \t1.0000\n","aining          \t1.0000\n","members         \t1.0000\n","-               \t1.0000\n","Members         \t1.0000\n","who             \t1.0000\n","ordered         \t1.0000\n","mango           \t1.0000\n","juice           \t1.0000\n","                \t1.0000\n","Members         \t1.0000\n","who             \t1.0000\n","ordered         \t1.0000\n","orange          \t1.0000\n","juice           \t1.0000\n","=               \t1.0000\n","(               \t1.0000\n","1               \t1.0000\n","/               \t1.0000\n","3               \t1.0000\n",")               \t1.0000\n","*               \t1.0000\n","Rem             \t0.5112\n","aining          \t1.0000\n","members         \t1.0000\n","-               \t1.0000\n","(               \t1.0000\n","1               \t1.0000\n","/               \t1.0000\n","3               \t1.0000\n",")               \t1.0000\n","*               \t1.0000\n","Rem             \t1.0000\n","aining          \t1.0000\n","members         \t1.0000\n","                \t1.0000\n","                \t1.0000\n","\n","[QID: q_73]  [Sampling: sampling2]  [Error Step: 4]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Sub             \t1.0000\n","tract           \t1.0000\n","the             \t1.0000\n","number          \t1.0000\n","of              \t1.0000\n","members         \t1.0000\n","who             \t1.0000\n","ordered         \t1.0000\n","mango           \t1.0000\n","juice           \t1.0000\n","from            \t0.9272\n","the             \t1.0000\n","total           \t0.5339\n","number          \t0.9176\n","of              \t1.0000\n","remaining       \t1.0000\n","members         \t1.0000\n","to              \t1.0000\n","find            \t1.0000\n","the             \t1.0000\n","number          \t1.0000\n","of              \t1.0000\n","members         \t1.0000\n","who             \t1.0000\n","ordered         \t1.0000\n","orange          \t1.0000\n","juice           \t1.0000\n",".               \t1.0000\n","                \t1.0000\n","Members         \t1.0000\n","who             \t1.0000\n","ordered         \t1.0000\n","orange          \t1.0000\n","juice           \t1.0000\n","=               \t1.0000\n","Rem             \t1.0000\n","aining          \t1.0000\n","members         \t1.0000\n","-               \t1.0000\n","Members         \t1.0000\n","who             \t1.0000\n","ordered         \t1.0000\n","mango           \t1.0000\n","juice           \t1.0000\n","                \t1.0000\n","Members         \t1.0000\n","who             \t1.0000\n","ordered         \t1.0000\n","orange          \t1.0000\n","juice           \t1.0000\n","=               \t1.0000\n","(               \t1.0000\n","1               \t1.0000\n","/               \t1.0000\n","3               \t1.0000\n",")               \t1.0000\n","*               \t1.0000\n","Rem             \t0.5112\n","aining          \t1.0000\n","members         \t1.0000\n","-               \t1.0000\n","(               \t1.0000\n","1               \t1.0000\n","/               \t1.0000\n","3               \t1.0000\n",")               \t1.0000\n","*               \t1.0000\n","Rem             \t1.0000\n","aining          \t1.0000\n","members         \t1.0000\n","                \t1.0000\n","                \t1.0000\n","\n","[QID: q_73]  [Sampling: sampling2]  [Error Step: 4]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Sub             \t1.0000\n","tract           \t1.0000\n","the             \t1.0000\n","number          \t1.0000\n","of              \t1.0000\n","members         \t1.0000\n","who             \t1.0000\n","ordered         \t1.0000\n","mango           \t1.0000\n","juice           \t1.0000\n","from            \t0.9272\n","the             \t1.0000\n","total           \t0.5339\n","number          \t0.9176\n","of              \t1.0000\n","remaining       \t1.0000\n","members         \t1.0000\n","to              \t1.0000\n","find            \t1.0000\n","the             \t1.0000\n","number          \t1.0000\n","of              \t1.0000\n","members         \t1.0000\n","who             \t1.0000\n","ordered         \t1.0000\n","orange          \t1.0000\n","juice           \t1.0000\n",".               \t1.0000\n","                \t1.0000\n","Members         \t1.0000\n","who             \t1.0000\n","ordered         \t1.0000\n","orange          \t1.0000\n","juice           \t1.0000\n","=               \t1.0000\n","Rem             \t1.0000\n","aining          \t1.0000\n","members         \t1.0000\n","-               \t1.0000\n","Members         \t1.0000\n","who             \t1.0000\n","ordered         \t1.0000\n","mango           \t1.0000\n","juice           \t1.0000\n","                \t1.0000\n","Members         \t1.0000\n","who             \t1.0000\n","ordered         \t1.0000\n","orange          \t1.0000\n","juice           \t1.0000\n","=               \t1.0000\n","(               \t1.0000\n","1               \t1.0000\n","/               \t1.0000\n","3               \t1.0000\n",")               \t1.0000\n","*               \t1.0000\n","Rem             \t0.5112\n","aining          \t1.0000\n","members         \t1.0000\n","-               \t1.0000\n","(               \t1.0000\n","1               \t1.0000\n","/               \t1.0000\n","3               \t1.0000\n",")               \t1.0000\n","*               \t1.0000\n","Rem             \t1.0000\n","aining          \t1.0000\n","members         \t1.0000\n","                \t1.0000\n","                \t1.0000\n","\n","[QID: q_73]  [Sampling: sampling2]  [Error Step: 4]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Sub             \t1.0000\n","tract           \t1.0000\n","the             \t1.0000\n","number          \t1.0000\n","of              \t1.0000\n","members         \t1.0000\n","who             \t1.0000\n","ordered         \t1.0000\n","mango           \t1.0000\n","juice           \t1.0000\n","from            \t0.9272\n","the             \t1.0000\n","total           \t0.5339\n","number          \t0.9176\n","of              \t1.0000\n","remaining       \t1.0000\n","members         \t1.0000\n","to              \t1.0000\n","find            \t1.0000\n","the             \t1.0000\n","number          \t1.0000\n","of              \t1.0000\n","members         \t1.0000\n","who             \t1.0000\n","ordered         \t1.0000\n","orange          \t1.0000\n","juice           \t1.0000\n",".               \t1.0000\n","                \t1.0000\n","Members         \t1.0000\n","who             \t1.0000\n","ordered         \t1.0000\n","orange          \t1.0000\n","juice           \t1.0000\n","=               \t1.0000\n","Rem             \t1.0000\n","aining          \t1.0000\n","members         \t1.0000\n","-               \t1.0000\n","Members         \t1.0000\n","who             \t1.0000\n","ordered         \t1.0000\n","mango           \t1.0000\n","juice           \t1.0000\n","                \t1.0000\n","Members         \t1.0000\n","who             \t1.0000\n","ordered         \t1.0000\n","orange          \t1.0000\n","juice           \t1.0000\n","=               \t1.0000\n","(               \t1.0000\n","1               \t1.0000\n","/               \t1.0000\n","3               \t1.0000\n",")               \t1.0000\n","*               \t1.0000\n","Rem             \t0.5112\n","aining          \t1.0000\n","members         \t1.0000\n","-               \t1.0000\n","(               \t1.0000\n","1               \t1.0000\n","/               \t1.0000\n","3               \t1.0000\n",")               \t1.0000\n","*               \t1.0000\n","Rem             \t1.0000\n","aining          \t1.0000\n","members         \t1.0000\n","                \t1.0000\n","                \t1.0000\n","\n","[QID: q_87]  [Sampling: sampling0]  [Error Step: 6]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Determine       \t0.7849\n","how             \t0.6713\n","much            \t1.0000\n","more            \t1.0000\n","money           \t1.0000\n","Mrs             \t1.0000\n",".               \t1.0000\n","Smith           \t1.0000\n","will            \t0.5438\n","still           \t0.7533\n","need            \t1.0000\n",".               \t0.8391\n","                \t1.0000\n","Amount          \t0.2226\n","needed          \t1.0000\n","=               \t1.0000\n","New             \t0.9397\n","total           \t1.0000\n","cost            \t1.0000\n","-               \t1.0000\n","$               \t0.9689\n","5               \t1.0000\n","0               \t1.0000\n","0               \t1.0000\n","                \t1.0000\n","                \t1.0000\n","Answer          \t0.7296\n",":               \t1.0000\n","Mrs             \t1.0000\n",".               \t1.0000\n","Smith           \t1.0000\n","will            \t1.0000\n","still           \t1.0000\n","need            \t1.0000\n","$               \t1.0000\n","2               \t0.1248\n","4               \t0.0136\n","more            \t0.2848\n","after           \t0.0356\n","the             \t0.9031\n","discount        \t0.8950\n",".               \t1.0000\n","<｜end▁of▁sentence｜>\t1.0000\n","\n","[QID: q_87]  [Sampling: sampling1]  [Error Step: 3]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","To              \t0.5212\n","find            \t0.4886\n","out             \t0.1093\n","the             \t0.7002\n","total           \t1.0000\n","cost            \t0.7449\n","of              \t1.0000\n","the             \t1.0000\n","clothes         \t1.0000\n","she             \t0.5618\n","picked          \t0.9387\n","out             \t0.7924\n",",               \t1.0000\n","we              \t1.0000\n","can             \t0.1137\n","multiply        \t0.1949\n","the             \t1.0000\n","additional      \t0.5445\n","amount          \t0.5214\n","needed          \t0.6169\n","by              \t0.6098\n","the             \t0.9433\n","original        \t0.5848\n","cost            \t0.3635\n","of              \t0.3382\n","the             \t0.8796\n","clothes         \t0.9551\n",":               \t0.7926\n","$               \t1.0000\n","2               \t0.9210\n","0               \t1.0000\n","0               \t1.0000\n","*               \t0.9727\n","$               \t1.0000\n","5               \t1.0000\n","0               \t1.0000\n","0               \t1.0000\n","=               \t1.0000\n","$               \t1.0000\n","1               \t1.0000\n","0               \t1.0000\n",",               \t1.0000\n","0               \t1.0000\n","0               \t1.0000\n","0               \t1.0000\n",".               \t1.0000\n","                \t1.0000\n","\n","[QID: q_90]  [Sampling: sampling0]  [Error Step: 3]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Simpl           \t0.3544\n","ify             \t1.0000\n","the             \t1.0000\n","expression      \t0.9106\n","to              \t0.8521\n","find            \t0.9630\n","the             \t0.9579\n","number          \t0.5665\n","of              \t1.0000\n","blocks          \t0.8330\n","Jess            \t1.0000\n","must            \t0.9614\n","walk            \t0.9433\n","to              \t0.1828\n","reach           \t0.8770\n","the             \t0.9409\n","store           \t1.0000\n","and             \t0.9069\n","gallery         \t0.9176\n",".               \t0.7202\n","                \t1.0000\n","Remaining       \t1.0000\n","blocks          \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","1               \t0.6045\n","9               \t0.4476\n","-               \t1.0000\n","                \t1.0000\n","5               \t1.0000\n","                \t1.0000\n","                \t0.4117\n","Answer          \t0.4009\n",":               \t1.0000\n","Jess            \t1.0000\n","must            \t1.0000\n","walk            \t1.0000\n","                \t1.0000\n","1               \t1.0000\n","4               \t1.0000\n","more            \t1.0000\n","blocks          \t1.0000\n","before          \t0.6907\n","arriving        \t1.0000\n","at              \t1.0000\n","work            \t1.0000\n",".               \t1.0000\n","<｜end▁of▁sentence｜>\t1.0000\n","\n","[QID: q_90]  [Sampling: sampling0]  [Error Step: 3]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Simpl           \t0.3544\n","ify             \t1.0000\n","the             \t1.0000\n","expression      \t0.9106\n","to              \t0.8521\n","find            \t0.9630\n","the             \t0.9579\n","number          \t0.5665\n","of              \t1.0000\n","blocks          \t0.8330\n","Jess            \t1.0000\n","must            \t0.9614\n","walk            \t0.9433\n","to              \t0.1828\n","reach           \t0.8770\n","the             \t0.9409\n","store           \t1.0000\n","and             \t0.9069\n","gallery         \t0.9176\n",".               \t0.7202\n","                \t1.0000\n","Remaining       \t1.0000\n","blocks          \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","1               \t0.6045\n","9               \t0.4476\n","-               \t1.0000\n","                \t1.0000\n","5               \t1.0000\n","                \t1.0000\n","                \t0.4117\n","Answer          \t0.4009\n",":               \t1.0000\n","Jess            \t1.0000\n","must            \t1.0000\n","walk            \t1.0000\n","                \t1.0000\n","1               \t1.0000\n","4               \t1.0000\n","more            \t1.0000\n","blocks          \t1.0000\n","before          \t0.6907\n","arriving        \t1.0000\n","at              \t1.0000\n","work            \t1.0000\n",".               \t1.0000\n","<｜end▁of▁sentence｜>\t1.0000\n","\n","[QID: q_90]  [Sampling: sampling0]  [Error Step: 3]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Simpl           \t0.3544\n","ify             \t1.0000\n","the             \t1.0000\n","expression      \t0.9106\n","to              \t0.8521\n","find            \t0.9630\n","the             \t0.9579\n","number          \t0.5665\n","of              \t1.0000\n","blocks          \t0.8330\n","Jess            \t1.0000\n","must            \t0.9614\n","walk            \t0.9433\n","to              \t0.1828\n","reach           \t0.8770\n","the             \t0.9409\n","store           \t1.0000\n","and             \t0.9069\n","gallery         \t0.9176\n",".               \t0.7202\n","                \t1.0000\n","Remaining       \t1.0000\n","blocks          \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","1               \t0.6045\n","9               \t0.4476\n","-               \t1.0000\n","                \t1.0000\n","5               \t1.0000\n","                \t1.0000\n","                \t0.4117\n","Answer          \t0.4009\n",":               \t1.0000\n","Jess            \t1.0000\n","must            \t1.0000\n","walk            \t1.0000\n","                \t1.0000\n","1               \t1.0000\n","4               \t1.0000\n","more            \t1.0000\n","blocks          \t1.0000\n","before          \t0.6907\n","arriving        \t1.0000\n","at              \t1.0000\n","work            \t1.0000\n",".               \t1.0000\n","<｜end▁of▁sentence｜>\t1.0000\n","\n","[QID: q_90]  [Sampling: sampling0]  [Error Step: 3]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Simpl           \t0.3544\n","ify             \t1.0000\n","the             \t1.0000\n","expression      \t0.9106\n","to              \t0.8521\n","find            \t0.9630\n","the             \t0.9579\n","number          \t0.5665\n","of              \t1.0000\n","blocks          \t0.8330\n","Jess            \t1.0000\n","must            \t0.9614\n","walk            \t0.9433\n","to              \t0.1828\n","reach           \t0.8770\n","the             \t0.9409\n","store           \t1.0000\n","and             \t0.9069\n","gallery         \t0.9176\n",".               \t0.7202\n","                \t1.0000\n","Remaining       \t1.0000\n","blocks          \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","1               \t0.6045\n","9               \t0.4476\n","-               \t1.0000\n","                \t1.0000\n","5               \t1.0000\n","                \t1.0000\n","                \t0.4117\n","Answer          \t0.4009\n",":               \t1.0000\n","Jess            \t1.0000\n","must            \t1.0000\n","walk            \t1.0000\n","                \t1.0000\n","1               \t1.0000\n","4               \t1.0000\n","more            \t1.0000\n","blocks          \t1.0000\n","before          \t0.6907\n","arriving        \t1.0000\n","at              \t1.0000\n","work            \t1.0000\n",".               \t1.0000\n","<｜end▁of▁sentence｜>\t1.0000\n","\n","[QID: q_94]  [Sampling: sampling0]  [Error Step: 1]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","First           \t0.5909\n",",               \t1.0000\n","find            \t0.0791\n","out             \t0.1230\n","the             \t0.1549\n","total           \t0.8770\n","number          \t1.0000\n","of              \t1.0000\n","pret            \t0.4721\n","z               \t1.0000\n","els             \t1.0000\n","by              \t0.0506\n","multiplying     \t0.7186\n","the             \t0.9031\n","number          \t0.9159\n","of              \t1.0000\n","pret            \t1.0000\n","z               \t1.0000\n","els             \t1.0000\n","(               \t0.7319\n","6               \t1.0000\n","4               \t1.0000\n",")               \t1.0000\n","by              \t1.0000\n","the             \t0.9714\n","number          \t0.9490\n","of              \t1.0000\n","kids            \t0.4063\n","in              \t0.4063\n","the             \t1.0000\n","class           \t1.0000\n","(               \t1.0000\n","1               \t1.0000\n","6               \t1.0000\n",").              \t0.9522\n","                \t0.1409\n","                \t0.9357\n","6               \t0.7734\n","4               \t1.0000\n","pret            \t1.0000\n","z               \t1.0000\n","els             \t1.0000\n","*               \t0.8536\n","                \t1.0000\n","1               \t1.0000\n","6               \t1.0000\n","kids            \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","1               \t1.0000\n","0               \t0.9302\n","2               \t1.0000\n","4               \t1.0000\n","pret            \t1.0000\n","z               \t1.0000\n","els             \t1.0000\n","                \t1.0000\n","                \t1.0000\n","\n","[QID: q_94]  [Sampling: sampling0]  [Error Step: 1]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","First           \t0.5909\n",",               \t1.0000\n","find            \t0.0791\n","out             \t0.1230\n","the             \t0.1549\n","total           \t0.8770\n","number          \t1.0000\n","of              \t1.0000\n","pret            \t0.4721\n","z               \t1.0000\n","els             \t1.0000\n","by              \t0.0506\n","multiplying     \t0.7186\n","the             \t0.9031\n","number          \t0.9159\n","of              \t1.0000\n","pret            \t1.0000\n","z               \t1.0000\n","els             \t1.0000\n","(               \t0.7319\n","6               \t1.0000\n","4               \t1.0000\n",")               \t1.0000\n","by              \t1.0000\n","the             \t0.9714\n","number          \t0.9490\n","of              \t1.0000\n","kids            \t0.4063\n","in              \t0.4063\n","the             \t1.0000\n","class           \t1.0000\n","(               \t1.0000\n","1               \t1.0000\n","6               \t1.0000\n",").              \t0.9522\n","                \t0.1409\n","                \t0.9357\n","6               \t0.7734\n","4               \t1.0000\n","pret            \t1.0000\n","z               \t1.0000\n","els             \t1.0000\n","*               \t0.8536\n","                \t1.0000\n","1               \t1.0000\n","6               \t1.0000\n","kids            \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","1               \t1.0000\n","0               \t0.9302\n","2               \t1.0000\n","4               \t1.0000\n","pret            \t1.0000\n","z               \t1.0000\n","els             \t1.0000\n","                \t1.0000\n","                \t1.0000\n","\n","[QID: q_94]  [Sampling: sampling0]  [Error Step: 1]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","First           \t0.5909\n",",               \t1.0000\n","find            \t0.0791\n","out             \t0.1230\n","the             \t0.1549\n","total           \t0.8770\n","number          \t1.0000\n","of              \t1.0000\n","pret            \t0.4721\n","z               \t1.0000\n","els             \t1.0000\n","by              \t0.0506\n","multiplying     \t0.7186\n","the             \t0.9031\n","number          \t0.9159\n","of              \t1.0000\n","pret            \t1.0000\n","z               \t1.0000\n","els             \t1.0000\n","(               \t0.7319\n","6               \t1.0000\n","4               \t1.0000\n",")               \t1.0000\n","by              \t1.0000\n","the             \t0.9714\n","number          \t0.9490\n","of              \t1.0000\n","kids            \t0.4063\n","in              \t0.4063\n","the             \t1.0000\n","class           \t1.0000\n","(               \t1.0000\n","1               \t1.0000\n","6               \t1.0000\n",").              \t0.9522\n","                \t0.1409\n","                \t0.9357\n","6               \t0.7734\n","4               \t1.0000\n","pret            \t1.0000\n","z               \t1.0000\n","els             \t1.0000\n","*               \t0.8536\n","                \t1.0000\n","1               \t1.0000\n","6               \t1.0000\n","kids            \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","1               \t1.0000\n","0               \t0.9302\n","2               \t1.0000\n","4               \t1.0000\n","pret            \t1.0000\n","z               \t1.0000\n","els             \t1.0000\n","                \t1.0000\n","                \t1.0000\n","\n","[QID: q_94]  [Sampling: sampling0]  [Error Step: 1]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","First           \t0.5909\n",",               \t1.0000\n","find            \t0.0791\n","out             \t0.1230\n","the             \t0.1549\n","total           \t0.8770\n","number          \t1.0000\n","of              \t1.0000\n","pret            \t0.4721\n","z               \t1.0000\n","els             \t1.0000\n","by              \t0.0506\n","multiplying     \t0.7186\n","the             \t0.9031\n","number          \t0.9159\n","of              \t1.0000\n","pret            \t1.0000\n","z               \t1.0000\n","els             \t1.0000\n","(               \t0.7319\n","6               \t1.0000\n","4               \t1.0000\n",")               \t1.0000\n","by              \t1.0000\n","the             \t0.9714\n","number          \t0.9490\n","of              \t1.0000\n","kids            \t0.4063\n","in              \t0.4063\n","the             \t1.0000\n","class           \t1.0000\n","(               \t1.0000\n","1               \t1.0000\n","6               \t1.0000\n",").              \t0.9522\n","                \t0.1409\n","                \t0.9357\n","6               \t0.7734\n","4               \t1.0000\n","pret            \t1.0000\n","z               \t1.0000\n","els             \t1.0000\n","*               \t0.8536\n","                \t1.0000\n","1               \t1.0000\n","6               \t1.0000\n","kids            \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","1               \t1.0000\n","0               \t0.9302\n","2               \t1.0000\n","4               \t1.0000\n","pret            \t1.0000\n","z               \t1.0000\n","els             \t1.0000\n","                \t1.0000\n","                \t1.0000\n","\n","[QID: q_97]  [Sampling: sampling0]  [Error Step: 2]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Calculate       \t1.0000\n","the             \t1.0000\n","total           \t1.0000\n","weight          \t1.0000\n","of              \t1.0000\n","luggage         \t0.9501\n","carried         \t0.9765\n","by              \t1.0000\n","the             \t1.0000\n","                \t1.0000\n","6               \t1.0000\n","people          \t1.0000\n",".               \t1.0000\n","                \t1.0000\n","Total           \t1.0000\n","weight          \t1.0000\n","of              \t1.0000\n","luggage         \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","3               \t0.8508\n","0               \t1.0000\n","0               \t1.0000\n","bags            \t0.1531\n","×               \t0.9251\n","5               \t1.0000\n","0               \t1.0000\n","pounds          \t1.0000\n","per             \t0.5515\n","bag             \t1.0000\n","=               \t0.6907\n","                \t1.0000\n","1               \t1.0000\n","5               \t1.0000\n",",               \t0.4888\n","0               \t1.0000\n","0               \t1.0000\n","0               \t1.0000\n","pounds          \t1.0000\n","                \t1.0000\n","                \t1.0000\n","\n","[QID: q_97]  [Sampling: sampling0]  [Error Step: 2]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Calculate       \t1.0000\n","the             \t1.0000\n","total           \t1.0000\n","weight          \t1.0000\n","of              \t1.0000\n","luggage         \t0.9501\n","carried         \t0.9765\n","by              \t1.0000\n","the             \t1.0000\n","                \t1.0000\n","6               \t1.0000\n","people          \t1.0000\n",".               \t1.0000\n","                \t1.0000\n","Total           \t1.0000\n","weight          \t1.0000\n","of              \t1.0000\n","luggage         \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","3               \t0.8508\n","0               \t1.0000\n","0               \t1.0000\n","bags            \t0.1531\n","×               \t0.9251\n","5               \t1.0000\n","0               \t1.0000\n","pounds          \t1.0000\n","per             \t0.5515\n","bag             \t1.0000\n","=               \t0.6907\n","                \t1.0000\n","1               \t1.0000\n","5               \t1.0000\n",",               \t0.4888\n","0               \t1.0000\n","0               \t1.0000\n","0               \t1.0000\n","pounds          \t1.0000\n","                \t1.0000\n","                \t1.0000\n","\n","[QID: q_97]  [Sampling: sampling0]  [Error Step: 2]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Calculate       \t1.0000\n","the             \t1.0000\n","total           \t1.0000\n","weight          \t1.0000\n","of              \t1.0000\n","luggage         \t0.9501\n","carried         \t0.9765\n","by              \t1.0000\n","the             \t1.0000\n","                \t1.0000\n","6               \t1.0000\n","people          \t1.0000\n",".               \t1.0000\n","                \t1.0000\n","Total           \t1.0000\n","weight          \t1.0000\n","of              \t1.0000\n","luggage         \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","3               \t0.8508\n","0               \t1.0000\n","0               \t1.0000\n","bags            \t0.1531\n","×               \t0.9251\n","5               \t1.0000\n","0               \t1.0000\n","pounds          \t1.0000\n","per             \t0.5515\n","bag             \t1.0000\n","=               \t0.6907\n","                \t1.0000\n","1               \t1.0000\n","5               \t1.0000\n",",               \t0.4888\n","0               \t1.0000\n","0               \t1.0000\n","0               \t1.0000\n","pounds          \t1.0000\n","                \t1.0000\n","                \t1.0000\n","\n","[QID: q_97]  [Sampling: sampling0]  [Error Step: 2]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Calculate       \t1.0000\n","the             \t1.0000\n","total           \t1.0000\n","weight          \t1.0000\n","of              \t1.0000\n","luggage         \t0.9501\n","carried         \t0.9765\n","by              \t1.0000\n","the             \t1.0000\n","                \t1.0000\n","6               \t1.0000\n","people          \t1.0000\n",".               \t1.0000\n","                \t1.0000\n","Total           \t1.0000\n","weight          \t1.0000\n","of              \t1.0000\n","luggage         \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","3               \t0.8508\n","0               \t1.0000\n","0               \t1.0000\n","bags            \t0.1531\n","×               \t0.9251\n","5               \t1.0000\n","0               \t1.0000\n","pounds          \t1.0000\n","per             \t0.5515\n","bag             \t1.0000\n","=               \t0.6907\n","                \t1.0000\n","1               \t1.0000\n","5               \t1.0000\n",",               \t0.4888\n","0               \t1.0000\n","0               \t1.0000\n","0               \t1.0000\n","pounds          \t1.0000\n","                \t1.0000\n","                \t1.0000\n","\n","[QID: q_100]  [Sampling: sampling0]  [Error Step: 2]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Calculate       \t0.9542\n","the             \t1.0000\n","number          \t0.7186\n","of              \t1.0000\n","days            \t0.1520\n","John            \t0.9622\n","will            \t1.0000\n","spend           \t1.0000\n","training        \t1.0000\n","high            \t1.0000\n","elevation       \t1.0000\n","push            \t1.0000\n","-               \t1.0000\n","ups             \t1.0000\n",".               \t1.0000\n","                \t1.0000\n","John            \t0.4443\n","adds            \t0.0260\n","                \t1.0000\n","1               \t1.0000\n","rep             \t1.0000\n","per             \t0.9298\n","day             \t1.0000\n","to              \t0.2495\n","the             \t0.7222\n","number          \t0.7394\n","of              \t1.0000\n","wall            \t0.2880\n","push            \t1.0000\n","-               \t1.0000\n","ups             \t1.0000\n","reps            \t0.2700\n","he              \t0.2168\n","achieved        \t0.0900\n","until           \t0.1006\n","he              \t1.0000\n","reaches         \t1.0000\n","                \t1.0000\n","1               \t1.0000\n","5               \t1.0000\n","reps            \t1.0000\n",".               \t0.8007\n","                \t1.0000\n","Number          \t0.9193\n","of              \t1.0000\n","days            \t1.0000\n","training        \t1.0000\n","high            \t1.0000\n","elevation       \t1.0000\n","push            \t1.0000\n","-               \t1.0000\n","ups             \t1.0000\n",":               \t1.0000\n","                \t1.0000\n","1               \t1.0000\n","5               \t0.9344\n","reps            \t1.0000\n","-               \t0.9579\n","                \t1.0000\n","1               \t0.9357\n","4               \t0.9124\n","reps            \t0.7889\n","(               \t0.4784\n","from            \t0.1850\n","step            \t0.5816\n","                \t1.0000\n","1               \t1.0000\n",")               \t1.0000\n","=               \t0.7773\n","                \t1.0000\n","1               \t1.0000\n","day             \t0.9159\n","                \t1.0000\n","                \t1.0000\n","\n","[QID: q_102]  [Sampling: sampling1]  [Error Step: 4]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Divide          \t0.5000\n","the             \t1.0000\n","total           \t1.0000\n","number          \t1.0000\n","of              \t1.0000\n","pages           \t1.0000\n","to              \t0.2227\n","read            \t1.0000\n","in              \t0.7924\n","two             \t1.0000\n","weeks           \t1.0000\n","by              \t1.0000\n","the             \t1.0000\n","number          \t1.0000\n","of              \t1.0000\n","days            \t1.0000\n","in              \t0.8696\n","two             \t1.0000\n","weeks           \t1.0000\n",".               \t0.5445\n","                \t1.0000\n","Pages           \t1.0000\n","_               \t1.0000\n","to              \t0.2467\n","_               \t1.0000\n","read            \t1.0000\n","_               \t1.0000\n","per             \t1.0000\n","_               \t1.0000\n","day             \t1.0000\n","=               \t1.0000\n","Total           \t1.0000\n","_               \t1.0000\n","pages           \t1.0000\n","_               \t1.0000\n","to              \t1.0000\n","_               \t1.0000\n","read            \t1.0000\n","/               \t1.0000\n","Two             \t1.0000\n","_               \t1.0000\n","weeks           \t1.0000\n","                \t1.0000\n","                \t1.0000\n","Answer          \t0.7187\n",":               \t1.0000\n","Yas             \t1.0000\n","na              \t1.0000\n","needs           \t0.9330\n","to              \t1.0000\n","read            \t1.0000\n","                \t1.0000\n","1               \t0.2419\n","0               \t0.5665\n","5               \t1.0000\n","pages           \t1.0000\n","every           \t1.0000\n","day             \t1.0000\n",".               \t0.1918\n","<｜end▁of▁sentence｜>\t1.0000\n","\n","[QID: q_102]  [Sampling: sampling1]  [Error Step: 4]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Divide          \t0.5000\n","the             \t1.0000\n","total           \t1.0000\n","number          \t1.0000\n","of              \t1.0000\n","pages           \t1.0000\n","to              \t0.2227\n","read            \t1.0000\n","in              \t0.7924\n","two             \t1.0000\n","weeks           \t1.0000\n","by              \t1.0000\n","the             \t1.0000\n","number          \t1.0000\n","of              \t1.0000\n","days            \t1.0000\n","in              \t0.8696\n","two             \t1.0000\n","weeks           \t1.0000\n",".               \t0.5445\n","                \t1.0000\n","Pages           \t1.0000\n","_               \t1.0000\n","to              \t0.2467\n","_               \t1.0000\n","read            \t1.0000\n","_               \t1.0000\n","per             \t1.0000\n","_               \t1.0000\n","day             \t1.0000\n","=               \t1.0000\n","Total           \t1.0000\n","_               \t1.0000\n","pages           \t1.0000\n","_               \t1.0000\n","to              \t1.0000\n","_               \t1.0000\n","read            \t1.0000\n","/               \t1.0000\n","Two             \t1.0000\n","_               \t1.0000\n","weeks           \t1.0000\n","                \t1.0000\n","                \t1.0000\n","Answer          \t0.7187\n",":               \t1.0000\n","Yas             \t1.0000\n","na              \t1.0000\n","needs           \t0.9330\n","to              \t1.0000\n","read            \t1.0000\n","                \t1.0000\n","1               \t0.2419\n","0               \t0.5665\n","5               \t1.0000\n","pages           \t1.0000\n","every           \t1.0000\n","day             \t1.0000\n",".               \t0.1918\n","<｜end▁of▁sentence｜>\t1.0000\n","\n","[QID: q_102]  [Sampling: sampling1]  [Error Step: 4]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Divide          \t0.5000\n","the             \t1.0000\n","total           \t1.0000\n","number          \t1.0000\n","of              \t1.0000\n","pages           \t1.0000\n","to              \t0.2227\n","read            \t1.0000\n","in              \t0.7924\n","two             \t1.0000\n","weeks           \t1.0000\n","by              \t1.0000\n","the             \t1.0000\n","number          \t1.0000\n","of              \t1.0000\n","days            \t1.0000\n","in              \t0.8696\n","two             \t1.0000\n","weeks           \t1.0000\n",".               \t0.5445\n","                \t1.0000\n","Pages           \t1.0000\n","_               \t1.0000\n","to              \t0.2467\n","_               \t1.0000\n","read            \t1.0000\n","_               \t1.0000\n","per             \t1.0000\n","_               \t1.0000\n","day             \t1.0000\n","=               \t1.0000\n","Total           \t1.0000\n","_               \t1.0000\n","pages           \t1.0000\n","_               \t1.0000\n","to              \t1.0000\n","_               \t1.0000\n","read            \t1.0000\n","/               \t1.0000\n","Two             \t1.0000\n","_               \t1.0000\n","weeks           \t1.0000\n","                \t1.0000\n","                \t1.0000\n","Answer          \t0.7187\n",":               \t1.0000\n","Yas             \t1.0000\n","na              \t1.0000\n","needs           \t0.9330\n","to              \t1.0000\n","read            \t1.0000\n","                \t1.0000\n","1               \t0.2419\n","0               \t0.5665\n","5               \t1.0000\n","pages           \t1.0000\n","every           \t1.0000\n","day             \t1.0000\n",".               \t0.1918\n","<｜end▁of▁sentence｜>\t1.0000\n","\n","[QID: q_102]  [Sampling: sampling1]  [Error Step: 4]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Divide          \t0.5000\n","the             \t1.0000\n","total           \t1.0000\n","number          \t1.0000\n","of              \t1.0000\n","pages           \t1.0000\n","to              \t0.2227\n","read            \t1.0000\n","in              \t0.7924\n","two             \t1.0000\n","weeks           \t1.0000\n","by              \t1.0000\n","the             \t1.0000\n","number          \t1.0000\n","of              \t1.0000\n","days            \t1.0000\n","in              \t0.8696\n","two             \t1.0000\n","weeks           \t1.0000\n",".               \t0.5445\n","                \t1.0000\n","Pages           \t1.0000\n","_               \t1.0000\n","to              \t0.2467\n","_               \t1.0000\n","read            \t1.0000\n","_               \t1.0000\n","per             \t1.0000\n","_               \t1.0000\n","day             \t1.0000\n","=               \t1.0000\n","Total           \t1.0000\n","_               \t1.0000\n","pages           \t1.0000\n","_               \t1.0000\n","to              \t1.0000\n","_               \t1.0000\n","read            \t1.0000\n","/               \t1.0000\n","Two             \t1.0000\n","_               \t1.0000\n","weeks           \t1.0000\n","                \t1.0000\n","                \t1.0000\n","Answer          \t0.7187\n",":               \t1.0000\n","Yas             \t1.0000\n","na              \t1.0000\n","needs           \t0.9330\n","to              \t1.0000\n","read            \t1.0000\n","                \t1.0000\n","1               \t0.2419\n","0               \t0.5665\n","5               \t1.0000\n","pages           \t1.0000\n","every           \t1.0000\n","day             \t1.0000\n",".               \t0.1918\n","<｜end▁of▁sentence｜>\t1.0000\n","\n","[QID: q_103]  [Sampling: sampling0]  [Error Step: 2]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Calculate       \t0.8508\n","how             \t0.2501\n","many            \t0.2814\n","hours           \t0.8817\n","Sam             \t1.0000\n","needs           \t0.9210\n","to              \t1.0000\n","work            \t1.0000\n","to              \t1.0000\n","earn            \t0.7678\n","the             \t0.1255\n","remaining       \t0.7791\n","amount          \t0.7703\n","for             \t0.0984\n","the             \t1.0000\n","video           \t1.0000\n","game            \t1.0000\n","console         \t1.0000\n",".               \t0.9468\n","                \t1.0000\n","Sam             \t0.9479\n","needs           \t1.0000\n","to              \t0.8330\n","earn            \t1.0000\n","$               \t1.0000\n","6               \t1.0000\n","0               \t1.0000\n","0               \t1.0000\n","-               \t0.8971\n","$               \t0.9357\n","3               \t1.0000\n","4               \t1.0000\n","0               \t1.0000\n","=               \t0.8361\n","$               \t1.0000\n","2               \t1.0000\n","6               \t1.0000\n","0               \t1.0000\n","more            \t0.8330\n",".               \t0.3532\n","                \t0.9714\n","                \t0.3316\n","\n","[QID: q_103]  [Sampling: sampling1]  [Error Step: 3]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Calculate       \t1.0000\n","Sam             \t0.8067\n","'               \t1.0000\n","s               \t1.0000\n","total           \t0.9708\n","earnings        \t1.0000\n","from            \t0.2605\n","March           \t0.5336\n","to              \t1.0000\n","February        \t0.9479\n",".               \t1.0000\n","                \t1.0000\n","To              \t0.1558\n","find            \t1.0000\n","Sam             \t0.7445\n","'               \t1.0000\n","s               \t1.0000\n","total           \t1.0000\n","earnings        \t1.0000\n",",               \t0.6259\n","add             \t1.0000\n","his             \t0.8451\n","earnings        \t1.0000\n","from            \t1.0000\n","September       \t0.3625\n","to              \t1.0000\n","February        \t1.0000\n","to              \t1.0000\n","his             \t0.9501\n","earnings        \t1.0000\n","from            \t1.0000\n","March           \t1.0000\n","to              \t1.0000\n","August          \t1.0000\n",":               \t1.0000\n","                \t1.0000\n","Total           \t1.0000\n","earnings        \t1.0000\n","=               \t1.0000\n","Earn            \t0.9445\n","ings            \t1.0000\n","from            \t1.0000\n","March           \t1.0000\n","to              \t1.0000\n","August          \t1.0000\n","+               \t1.0000\n","Earn            \t1.0000\n","ings            \t1.0000\n","from            \t1.0000\n","September       \t1.0000\n","to              \t1.0000\n","February        \t1.0000\n","                \t1.0000\n","Total           \t1.0000\n","earnings        \t1.0000\n","=               \t1.0000\n","$               \t0.8391\n","4               \t1.0000\n","6               \t1.0000\n","0               \t1.0000\n","+               \t1.0000\n","($              \t1.0000\n","4               \t1.0000\n","6               \t1.0000\n","0               \t1.0000\n","/               \t1.0000\n","                \t1.0000\n","2               \t1.0000\n","3               \t1.0000\n","hours           \t1.0000\n",")               \t1.0000\n","*               \t1.0000\n","                \t1.0000\n","8               \t1.0000\n","hours           \t1.0000\n","                \t1.0000\n","                \t1.0000\n","\n","[QID: q_112]  [Sampling: sampling1]  [Error Step: 3]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Jennifer        \t1.0000\n","gives           \t0.8330\n","her             \t1.0000\n","sister          \t1.0000\n","                \t0.7449\n","2               \t1.0000\n","of              \t0.4888\n","each            \t1.0000\n","fruit           \t1.0000\n",".               \t0.8508\n","To              \t0.1793\n","find            \t1.0000\n","out             \t0.9069\n","how             \t1.0000\n","many            \t1.0000\n","fruits          \t1.0000\n","she             \t1.0000\n","gives           \t0.8863\n","away            \t0.9409\n","in              \t0.2385\n","total           \t1.0000\n",",               \t1.0000\n","we              \t1.0000\n","need            \t0.0903\n","to              \t1.0000\n","multiply        \t0.6053\n","the             \t1.0000\n","number          \t1.0000\n","of              \t1.0000\n","each            \t1.0000\n","fruit           \t1.0000\n","by              \t1.0000\n","                \t1.0000\n","2               \t1.0000\n",":               \t0.5472\n","                \t0.6511\n","1               \t0.0530\n","0               \t1.0000\n","pears           \t1.0000\n","*               \t1.0000\n","                \t1.0000\n","2               \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","2               \t1.0000\n","0               \t1.0000\n","pears           \t1.0000\n",",               \t0.9682\n","                \t1.0000\n","2               \t1.0000\n","0               \t1.0000\n","oranges         \t1.0000\n","*               \t1.0000\n","                \t1.0000\n","2               \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","4               \t1.0000\n","0               \t1.0000\n","oranges         \t1.0000\n",",               \t1.0000\n","and             \t0.9106\n","                \t1.0000\n","2               \t1.0000\n","0               \t1.0000\n","apples          \t1.0000\n","*               \t1.0000\n","                \t1.0000\n","2               \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","4               \t1.0000\n","0               \t1.0000\n","apples          \t1.0000\n",".               \t1.0000\n","                \t1.0000\n","                \t1.0000\n","\n","[QID: q_121]  [Sampling: sampling1]  [Error Step: 1]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Determine       \t0.2271\n","the             \t1.0000\n","number          \t0.7574\n","of              \t1.0000\n","ho              \t0.8235\n","ots             \t1.0000\n","per             \t1.0000\n","minute          \t1.0000\n","for             \t0.1948\n","                \t0.2809\n","2               \t0.5225\n","0               \t1.0000\n","barn            \t0.2697\n","yard            \t1.0000\n","ow              \t1.0000\n","ls              \t1.0000\n",".               \t1.0000\n","                \t1.0000\n","To              \t0.5711\n","do              \t1.0000\n","this            \t1.0000\n",",               \t1.0000\n","multiply        \t0.4010\n","the             \t1.0000\n","number          \t1.0000\n","of              \t1.0000\n","ho              \t0.7319\n","ots             \t1.0000\n","per             \t1.0000\n","minute          \t1.0000\n","for             \t0.3291\n","one             \t0.9714\n","owl             \t0.6811\n","(               \t0.9384\n","5               \t1.0000\n",")               \t1.0000\n","by              \t1.0000\n","the             \t1.0000\n","number          \t1.0000\n","of              \t1.0000\n","barn            \t0.4444\n","yard            \t1.0000\n","ow              \t1.0000\n","ls              \t1.0000\n","(               \t1.0000\n","2               \t1.0000\n","0               \t1.0000\n",").              \t0.7773\n","                \t1.0000\n","5               \t0.5666\n","ho              \t0.8067\n","ots             \t1.0000\n","/               \t1.0000\n","min             \t0.4777\n","*               \t1.0000\n","                \t1.0000\n","2               \t1.0000\n","0               \t1.0000\n","ow              \t1.0000\n","ls              \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","1               \t1.0000\n","0               \t1.0000\n","0               \t1.0000\n","ho              \t1.0000\n","ots             \t1.0000\n","/               \t1.0000\n","min             \t1.0000\n","                \t1.0000\n","                \t1.0000\n","\n","[QID: q_121]  [Sampling: sampling1]  [Error Step: 1]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Determine       \t0.2271\n","the             \t1.0000\n","number          \t0.7574\n","of              \t1.0000\n","ho              \t0.8235\n","ots             \t1.0000\n","per             \t1.0000\n","minute          \t1.0000\n","for             \t0.1948\n","                \t0.2809\n","2               \t0.5225\n","0               \t1.0000\n","barn            \t0.2697\n","yard            \t1.0000\n","ow              \t1.0000\n","ls              \t1.0000\n",".               \t1.0000\n","                \t1.0000\n","To              \t0.5711\n","do              \t1.0000\n","this            \t1.0000\n",",               \t1.0000\n","multiply        \t0.4010\n","the             \t1.0000\n","number          \t1.0000\n","of              \t1.0000\n","ho              \t0.7319\n","ots             \t1.0000\n","per             \t1.0000\n","minute          \t1.0000\n","for             \t0.3291\n","one             \t0.9714\n","owl             \t0.6811\n","(               \t0.9384\n","5               \t1.0000\n",")               \t1.0000\n","by              \t1.0000\n","the             \t1.0000\n","number          \t1.0000\n","of              \t1.0000\n","barn            \t0.4444\n","yard            \t1.0000\n","ow              \t1.0000\n","ls              \t1.0000\n","(               \t1.0000\n","2               \t1.0000\n","0               \t1.0000\n",").              \t0.7773\n","                \t1.0000\n","5               \t0.5666\n","ho              \t0.8067\n","ots             \t1.0000\n","/               \t1.0000\n","min             \t0.4777\n","*               \t1.0000\n","                \t1.0000\n","2               \t1.0000\n","0               \t1.0000\n","ow              \t1.0000\n","ls              \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","1               \t1.0000\n","0               \t1.0000\n","0               \t1.0000\n","ho              \t1.0000\n","ots             \t1.0000\n","/               \t1.0000\n","min             \t1.0000\n","                \t1.0000\n","                \t1.0000\n","\n","[QID: q_121]  [Sampling: sampling1]  [Error Step: 1]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Determine       \t0.2271\n","the             \t1.0000\n","number          \t0.7574\n","of              \t1.0000\n","ho              \t0.8235\n","ots             \t1.0000\n","per             \t1.0000\n","minute          \t1.0000\n","for             \t0.1948\n","                \t0.2809\n","2               \t0.5225\n","0               \t1.0000\n","barn            \t0.2697\n","yard            \t1.0000\n","ow              \t1.0000\n","ls              \t1.0000\n",".               \t1.0000\n","                \t1.0000\n","To              \t0.5711\n","do              \t1.0000\n","this            \t1.0000\n",",               \t1.0000\n","multiply        \t0.4010\n","the             \t1.0000\n","number          \t1.0000\n","of              \t1.0000\n","ho              \t0.7319\n","ots             \t1.0000\n","per             \t1.0000\n","minute          \t1.0000\n","for             \t0.3291\n","one             \t0.9714\n","owl             \t0.6811\n","(               \t0.9384\n","5               \t1.0000\n",")               \t1.0000\n","by              \t1.0000\n","the             \t1.0000\n","number          \t1.0000\n","of              \t1.0000\n","barn            \t0.4444\n","yard            \t1.0000\n","ow              \t1.0000\n","ls              \t1.0000\n","(               \t1.0000\n","2               \t1.0000\n","0               \t1.0000\n",").              \t0.7773\n","                \t1.0000\n","5               \t0.5666\n","ho              \t0.8067\n","ots             \t1.0000\n","/               \t1.0000\n","min             \t0.4777\n","*               \t1.0000\n","                \t1.0000\n","2               \t1.0000\n","0               \t1.0000\n","ow              \t1.0000\n","ls              \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","1               \t1.0000\n","0               \t1.0000\n","0               \t1.0000\n","ho              \t1.0000\n","ots             \t1.0000\n","/               \t1.0000\n","min             \t1.0000\n","                \t1.0000\n","                \t1.0000\n","\n","[QID: q_121]  [Sampling: sampling1]  [Error Step: 1]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Determine       \t0.2271\n","the             \t1.0000\n","number          \t0.7574\n","of              \t1.0000\n","ho              \t0.8235\n","ots             \t1.0000\n","per             \t1.0000\n","minute          \t1.0000\n","for             \t0.1948\n","                \t0.2809\n","2               \t0.5225\n","0               \t1.0000\n","barn            \t0.2697\n","yard            \t1.0000\n","ow              \t1.0000\n","ls              \t1.0000\n",".               \t1.0000\n","                \t1.0000\n","To              \t0.5711\n","do              \t1.0000\n","this            \t1.0000\n",",               \t1.0000\n","multiply        \t0.4010\n","the             \t1.0000\n","number          \t1.0000\n","of              \t1.0000\n","ho              \t0.7319\n","ots             \t1.0000\n","per             \t1.0000\n","minute          \t1.0000\n","for             \t0.3291\n","one             \t0.9714\n","owl             \t0.6811\n","(               \t0.9384\n","5               \t1.0000\n",")               \t1.0000\n","by              \t1.0000\n","the             \t1.0000\n","number          \t1.0000\n","of              \t1.0000\n","barn            \t0.4444\n","yard            \t1.0000\n","ow              \t1.0000\n","ls              \t1.0000\n","(               \t1.0000\n","2               \t1.0000\n","0               \t1.0000\n",").              \t0.7773\n","                \t1.0000\n","5               \t0.5666\n","ho              \t0.8067\n","ots             \t1.0000\n","/               \t1.0000\n","min             \t0.4777\n","*               \t1.0000\n","                \t1.0000\n","2               \t1.0000\n","0               \t1.0000\n","ow              \t1.0000\n","ls              \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","1               \t1.0000\n","0               \t1.0000\n","0               \t1.0000\n","ho              \t1.0000\n","ots             \t1.0000\n","/               \t1.0000\n","min             \t1.0000\n","                \t1.0000\n","                \t1.0000\n","\n","[QID: q_127]  [Sampling: sampling0]  [Error Step: 4]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Calculate       \t0.9031\n","the             \t1.0000\n","total           \t1.0000\n","cost            \t1.0000\n","of              \t0.6614\n","everything      \t0.9561\n",".               \t1.0000\n","                \t1.0000\n","Total           \t0.9166\n","cost            \t1.0000\n","=               \t0.9272\n","cost            \t0.9479\n","of              \t1.0000\n","dirt            \t1.0000\n","bikes           \t1.0000\n","+               \t1.0000\n","cost            \t1.0000\n","of              \t1.0000\n","off             \t1.0000\n","-               \t1.0000\n","road            \t1.0000\n","vehicles        \t1.0000\n","+               \t1.0000\n","cost            \t1.0000\n","of              \t1.0000\n","registration    \t0.4888\n","                \t1.0000\n","Total           \t1.0000\n","cost            \t1.0000\n","=               \t1.0000\n","$               \t1.0000\n","4               \t1.0000\n","5               \t1.0000\n","0               \t1.0000\n","(               \t0.0567\n","d               \t1.0000\n","irt             \t1.0000\n","bikes           \t1.0000\n",")               \t1.0000\n","+               \t1.0000\n","$               \t1.0000\n","1               \t1.0000\n","2               \t1.0000\n","0               \t1.0000\n","0               \t1.0000\n","(               \t1.0000\n","off             \t1.0000\n","-               \t1.0000\n","road            \t1.0000\n","vehicles        \t1.0000\n",")               \t1.0000\n","+               \t1.0000\n","$               \t1.0000\n","1               \t1.0000\n","7               \t1.0000\n","5               \t1.0000\n","(               \t1.0000\n","registration    \t1.0000\n",")               \t1.0000\n","=               \t0.3692\n","$               \t1.0000\n","1               \t1.0000\n","7               \t1.0000\n","2               \t1.0000\n","5               \t1.0000\n","                \t1.0000\n","                \t1.0000\n","Answer          \t1.0000\n",":               \t1.0000\n","James           \t1.0000\n","paid            \t1.0000\n","a               \t1.0000\n","total           \t1.0000\n","of              \t1.0000\n","$               \t1.0000\n","1               \t1.0000\n","7               \t1.0000\n","2               \t1.0000\n","5               \t1.0000\n","for             \t1.0000\n","the             \t0.6034\n","                \t0.8770\n","3               \t1.0000\n","dirt            \t1.0000\n","bikes           \t1.0000\n",",               \t0.2725\n","                \t1.0000\n","4               \t1.0000\n","off             \t1.0000\n","-               \t1.0000\n","road            \t1.0000\n","vehicles        \t1.0000\n",",               \t1.0000\n","and             \t1.0000\n","the             \t0.7851\n","registration    \t0.4874\n",".               \t0.1636\n","<｜end▁of▁sentence｜>\t1.0000\n","\n","[QID: q_129]  [Sampling: sampling0]  [Error Step: 6]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Calculate       \t0.2564\n","the             \t1.0000\n","total           \t0.9532\n","number          \t1.0000\n","of              \t1.0000\n","each            \t0.6955\n","dessert         \t1.0000\n","each            \t0.8473\n","person          \t1.0000\n","will            \t1.0000\n","get             \t1.0000\n",".               \t1.0000\n","                \t1.0000\n","Total           \t1.0000\n","cookies         \t1.0000\n","per             \t1.0000\n","person          \t1.0000\n","=               \t1.0000\n","Number          \t1.0000\n","of              \t1.0000\n","cookies         \t1.0000\n","per             \t1.0000\n","person          \t1.0000\n","*               \t0.2104\n","(               \t0.0362\n","Total           \t0.6133\n","cookies         \t1.0000\n","/               \t0.8959\n","Number          \t1.0000\n","of              \t1.0000\n","people          \t1.0000\n",")               \t1.0000\n","                \t1.0000\n","Total           \t1.0000\n","cookies         \t0.9371\n","per             \t1.0000\n","person          \t1.0000\n","=               \t1.0000\n","                \t0.7996\n","6               \t1.0000\n","                \t1.0000\n","Total           \t0.5000\n","candy           \t1.0000\n","per             \t1.0000\n","person          \t1.0000\n","=               \t1.0000\n","Number          \t1.0000\n","of              \t1.0000\n","candy           \t1.0000\n","per             \t1.0000\n","person          \t1.0000\n","*               \t1.0000\n","(               \t1.0000\n","Total           \t1.0000\n","candy           \t1.0000\n","/               \t1.0000\n","Number          \t1.0000\n","of              \t1.0000\n","people          \t1.0000\n",")               \t1.0000\n","                \t1.0000\n","Total           \t1.0000\n","candy           \t1.0000\n","per             \t1.0000\n","person          \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","9               \t1.0000\n","                \t1.0000\n","Total           \t1.0000\n","brown           \t1.0000\n","ies             \t1.0000\n","per             \t1.0000\n","person          \t1.0000\n","=               \t1.0000\n","Number          \t1.0000\n","of              \t1.0000\n","brown           \t1.0000\n","ies             \t1.0000\n","per             \t1.0000\n","person          \t1.0000\n","*               \t1.0000\n","(               \t1.0000\n","Total           \t1.0000\n","brown           \t1.0000\n","ies             \t1.0000\n","/               \t1.0000\n","Number          \t1.0000\n","of              \t1.0000\n","people          \t1.0000\n",")               \t1.0000\n","                \t1.0000\n","Total           \t1.0000\n","brown           \t1.0000\n","ies             \t1.0000\n","per             \t1.0000\n","person          \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","3               \t1.0000\n","                \t1.0000\n","                \t1.0000\n","Conclusion      \t0.0478\n",":               \t1.0000\n","Each            \t0.7996\n","person          \t1.0000\n","will            \t1.0000\n","get             \t1.0000\n","                \t1.0000\n","6               \t1.0000\n","cookies         \t1.0000\n",",               \t1.0000\n","                \t1.0000\n","9               \t1.0000\n","candies         \t0.8721\n",",               \t1.0000\n","and             \t1.0000\n","                \t1.0000\n","3               \t1.0000\n","brown           \t1.0000\n","ies             \t1.0000\n",".               \t1.0000\n","<｜end▁of▁sentence｜>\t1.0000\n","\n","[QID: q_148]  [Sampling: sampling2]  [Error Step: 3]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Calculate       \t0.5000\n","the             \t1.0000\n","remaining       \t0.3558\n","number          \t1.0000\n","of              \t1.0000\n","legs            \t0.7948\n","from            \t0.4914\n","the             \t1.0000\n","damaged         \t0.1778\n","chairs          \t1.0000\n",".               \t0.9570\n","                \t1.0000\n","To              \t0.0349\n","do              \t1.0000\n","this            \t1.0000\n",",               \t1.0000\n","we              \t1.0000\n","'               \t1.0000\n","ll              \t1.0000\n","multiply        \t1.0000\n","the             \t1.0000\n","number          \t1.0000\n","of              \t1.0000\n","damaged         \t1.0000\n","chairs          \t1.0000\n","by              \t1.0000\n","the             \t1.0000\n","number          \t1.0000\n","of              \t1.0000\n","legs            \t1.0000\n","per             \t0.6293\n","chair           \t0.9316\n",".               \t1.0000\n","                \t1.0000\n","                \t1.0000\n","Number          \t1.0000\n","of              \t1.0000\n","damaged         \t0.5883\n","chairs          \t0.9479\n","=               \t1.0000\n","                \t1.0000\n","3               \t1.0000\n","2               \t1.0000\n","                \t0.9241\n","Number          \t0.8202\n","of              \t1.0000\n","legs            \t1.0000\n","per             \t1.0000\n","damaged         \t0.0603\n","chair           \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","4               \t1.0000\n","                \t0.6942\n","                \t1.0000\n","Remaining       \t0.9702\n","legs            \t1.0000\n","=               \t0.0931\n","(               \t1.0000\n","3               \t1.0000\n","2               \t1.0000\n",")               \t1.0000\n","*               \t1.0000\n","(               \t1.0000\n","4               \t1.0000\n",")               \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","1               \t1.0000\n","2               \t1.0000\n","8               \t1.0000\n","legs            \t1.0000\n","                \t1.0000\n","                \t1.0000\n","\n","[QID: q_159]  [Sampling: sampling2]  [Error Step: 4]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Perform         \t0.1910\n","the             \t1.0000\n","calculations    \t0.7767\n",".               \t0.8938\n","                \t1.0000\n","Total           \t1.0000\n","money           \t1.0000\n","=               \t1.0000\n","(               \t0.6713\n","1               \t0.8202\n",",               \t0.4389\n","1               \t1.0000\n","5               \t1.0000\n","2               \t1.0000\n","er              \t0.7406\n","asers           \t1.0000\n",")               \t1.0000\n","*               \t1.0000\n","$               \t0.9409\n","0               \t1.0000\n",".               \t1.0000\n","7               \t1.0000\n","5               \t1.0000\n","                \t0.9551\n","Total           \t0.6907\n","money           \t1.0000\n","=               \t1.0000\n","$               \t1.0000\n","8               \t1.0000\n","6               \t1.0000\n",".               \t1.0000\n","3               \t1.0000\n","6               \t0.8885\n","                \t1.0000\n","                \t1.0000\n","Answer          \t0.6990\n",":               \t1.0000\n","The             \t1.0000\n","student         \t1.0000\n","council         \t1.0000\n","will            \t1.0000\n","make            \t1.0000\n","$               \t1.0000\n","8               \t1.0000\n","6               \t1.0000\n",".               \t1.0000\n","3               \t1.0000\n","6               \t1.0000\n","by              \t0.2364\n","selling         \t1.0000\n","all             \t0.4009\n","the             \t1.0000\n","scented         \t1.0000\n","er              \t1.0000\n","asers           \t1.0000\n",".               \t1.0000\n","<｜end▁of▁sentence｜>\t1.0000\n","\n","[QID: q_159]  [Sampling: sampling2]  [Error Step: 4]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Perform         \t0.1910\n","the             \t1.0000\n","calculations    \t0.7767\n",".               \t0.8938\n","                \t1.0000\n","Total           \t1.0000\n","money           \t1.0000\n","=               \t1.0000\n","(               \t0.6713\n","1               \t0.8202\n",",               \t0.4389\n","1               \t1.0000\n","5               \t1.0000\n","2               \t1.0000\n","er              \t0.7406\n","asers           \t1.0000\n",")               \t1.0000\n","*               \t1.0000\n","$               \t0.9409\n","0               \t1.0000\n",".               \t1.0000\n","7               \t1.0000\n","5               \t1.0000\n","                \t0.9551\n","Total           \t0.6907\n","money           \t1.0000\n","=               \t1.0000\n","$               \t1.0000\n","8               \t1.0000\n","6               \t1.0000\n",".               \t1.0000\n","3               \t1.0000\n","6               \t0.8885\n","                \t1.0000\n","                \t1.0000\n","Answer          \t0.6990\n",":               \t1.0000\n","The             \t1.0000\n","student         \t1.0000\n","council         \t1.0000\n","will            \t1.0000\n","make            \t1.0000\n","$               \t1.0000\n","8               \t1.0000\n","6               \t1.0000\n",".               \t1.0000\n","3               \t1.0000\n","6               \t1.0000\n","by              \t0.2364\n","selling         \t1.0000\n","all             \t0.4009\n","the             \t1.0000\n","scented         \t1.0000\n","er              \t1.0000\n","asers           \t1.0000\n",".               \t1.0000\n","<｜end▁of▁sentence｜>\t1.0000\n","\n","[QID: q_159]  [Sampling: sampling2]  [Error Step: 4]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Perform         \t0.1910\n","the             \t1.0000\n","calculations    \t0.7767\n",".               \t0.8938\n","                \t1.0000\n","Total           \t1.0000\n","money           \t1.0000\n","=               \t1.0000\n","(               \t0.6713\n","1               \t0.8202\n",",               \t0.4389\n","1               \t1.0000\n","5               \t1.0000\n","2               \t1.0000\n","er              \t0.7406\n","asers           \t1.0000\n",")               \t1.0000\n","*               \t1.0000\n","$               \t0.9409\n","0               \t1.0000\n",".               \t1.0000\n","7               \t1.0000\n","5               \t1.0000\n","                \t0.9551\n","Total           \t0.6907\n","money           \t1.0000\n","=               \t1.0000\n","$               \t1.0000\n","8               \t1.0000\n","6               \t1.0000\n",".               \t1.0000\n","3               \t1.0000\n","6               \t0.8885\n","                \t1.0000\n","                \t1.0000\n","Answer          \t0.6990\n",":               \t1.0000\n","The             \t1.0000\n","student         \t1.0000\n","council         \t1.0000\n","will            \t1.0000\n","make            \t1.0000\n","$               \t1.0000\n","8               \t1.0000\n","6               \t1.0000\n",".               \t1.0000\n","3               \t1.0000\n","6               \t1.0000\n","by              \t0.2364\n","selling         \t1.0000\n","all             \t0.4009\n","the             \t1.0000\n","scented         \t1.0000\n","er              \t1.0000\n","asers           \t1.0000\n",".               \t1.0000\n","<｜end▁of▁sentence｜>\t1.0000\n","\n","[QID: q_159]  [Sampling: sampling2]  [Error Step: 4]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Perform         \t0.1910\n","the             \t1.0000\n","calculations    \t0.7767\n",".               \t0.8938\n","                \t1.0000\n","Total           \t1.0000\n","money           \t1.0000\n","=               \t1.0000\n","(               \t0.6713\n","1               \t0.8202\n",",               \t0.4389\n","1               \t1.0000\n","5               \t1.0000\n","2               \t1.0000\n","er              \t0.7406\n","asers           \t1.0000\n",")               \t1.0000\n","*               \t1.0000\n","$               \t0.9409\n","0               \t1.0000\n",".               \t1.0000\n","7               \t1.0000\n","5               \t1.0000\n","                \t0.9551\n","Total           \t0.6907\n","money           \t1.0000\n","=               \t1.0000\n","$               \t1.0000\n","8               \t1.0000\n","6               \t1.0000\n",".               \t1.0000\n","3               \t1.0000\n","6               \t0.8885\n","                \t1.0000\n","                \t1.0000\n","Answer          \t0.6990\n",":               \t1.0000\n","The             \t1.0000\n","student         \t1.0000\n","council         \t1.0000\n","will            \t1.0000\n","make            \t1.0000\n","$               \t1.0000\n","8               \t1.0000\n","6               \t1.0000\n",".               \t1.0000\n","3               \t1.0000\n","6               \t1.0000\n","by              \t0.2364\n","selling         \t1.0000\n","all             \t0.4009\n","the             \t1.0000\n","scented         \t1.0000\n","er              \t1.0000\n","asers           \t1.0000\n",".               \t1.0000\n","<｜end▁of▁sentence｜>\t1.0000\n","\n","[QID: q_169]  [Sampling: sampling0]  [Error Step: 5]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","After           \t0.0489\n","Eric            \t1.0000\n","dips            \t0.0959\n","his             \t1.0000\n","hands           \t1.0000\n","in              \t0.1798\n",",               \t0.4689\n","he              \t1.0000\n","pulls           \t0.8179\n","out             \t1.0000\n","a               \t0.7849\n","quarter         \t1.0000\n",",               \t0.9561\n","so              \t0.8541\n","he              \t0.4683\n","contributes     \t0.8955\n","another         \t0.4171\n","                \t1.0000\n","2               \t1.0000\n","5               \t1.0000\n","cents           \t1.0000\n",".               \t0.9579\n","                \t1.0000\n","\n","[QID: q_174]  [Sampling: sampling0]  [Error Step: 2]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Determine       \t0.7121\n","how             \t0.7002\n","many            \t0.9409\n","servings        \t0.8480\n","John            \t1.0000\n","ate             \t1.0000\n",".               \t1.0000\n","                \t1.0000\n","Since           \t1.0000\n","John            \t0.9031\n","ate             \t1.0000\n","half            \t1.0000\n","the             \t1.0000\n","package         \t1.0000\n",",               \t1.0000\n","divide          \t0.2462\n","the             \t1.0000\n","total           \t1.0000\n","calories        \t0.1698\n","(               \t0.8262\n","3               \t1.0000\n","6               \t1.0000\n","0               \t1.0000\n",")               \t1.0000\n","by              \t1.0000\n","the             \t1.0000\n","number          \t0.9682\n","of              \t1.0000\n","servings        \t1.0000\n","in              \t0.7448\n","the             \t1.0000\n","package         \t1.0000\n","(               \t1.0000\n","3               \t1.0000\n",").              \t1.0000\n","                \t1.0000\n","3               \t1.0000\n","6               \t1.0000\n","0               \t1.0000\n","calories        \t1.0000\n","/               \t1.0000\n","                \t1.0000\n","3               \t1.0000\n","servings        \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","1               \t1.0000\n","2               \t1.0000\n","0               \t1.0000\n","calories        \t1.0000\n","                \t1.0000\n","                \t1.0000\n","\n","[QID: q_174]  [Sampling: sampling0]  [Error Step: 2]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Determine       \t0.7121\n","how             \t0.7002\n","many            \t0.9409\n","servings        \t0.8480\n","John            \t1.0000\n","ate             \t1.0000\n",".               \t1.0000\n","                \t1.0000\n","Since           \t1.0000\n","John            \t0.9031\n","ate             \t1.0000\n","half            \t1.0000\n","the             \t1.0000\n","package         \t1.0000\n",",               \t1.0000\n","divide          \t0.2462\n","the             \t1.0000\n","total           \t1.0000\n","calories        \t0.1698\n","(               \t0.8262\n","3               \t1.0000\n","6               \t1.0000\n","0               \t1.0000\n",")               \t1.0000\n","by              \t1.0000\n","the             \t1.0000\n","number          \t0.9682\n","of              \t1.0000\n","servings        \t1.0000\n","in              \t0.7448\n","the             \t1.0000\n","package         \t1.0000\n","(               \t1.0000\n","3               \t1.0000\n",").              \t1.0000\n","                \t1.0000\n","3               \t1.0000\n","6               \t1.0000\n","0               \t1.0000\n","calories        \t1.0000\n","/               \t1.0000\n","                \t1.0000\n","3               \t1.0000\n","servings        \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","1               \t1.0000\n","2               \t1.0000\n","0               \t1.0000\n","calories        \t1.0000\n","                \t1.0000\n","                \t1.0000\n","\n","[QID: q_174]  [Sampling: sampling0]  [Error Step: 2]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Determine       \t0.7121\n","how             \t0.7002\n","many            \t0.9409\n","servings        \t0.8480\n","John            \t1.0000\n","ate             \t1.0000\n",".               \t1.0000\n","                \t1.0000\n","Since           \t1.0000\n","John            \t0.9031\n","ate             \t1.0000\n","half            \t1.0000\n","the             \t1.0000\n","package         \t1.0000\n",",               \t1.0000\n","divide          \t0.2462\n","the             \t1.0000\n","total           \t1.0000\n","calories        \t0.1698\n","(               \t0.8262\n","3               \t1.0000\n","6               \t1.0000\n","0               \t1.0000\n",")               \t1.0000\n","by              \t1.0000\n","the             \t1.0000\n","number          \t0.9682\n","of              \t1.0000\n","servings        \t1.0000\n","in              \t0.7448\n","the             \t1.0000\n","package         \t1.0000\n","(               \t1.0000\n","3               \t1.0000\n",").              \t1.0000\n","                \t1.0000\n","3               \t1.0000\n","6               \t1.0000\n","0               \t1.0000\n","calories        \t1.0000\n","/               \t1.0000\n","                \t1.0000\n","3               \t1.0000\n","servings        \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","1               \t1.0000\n","2               \t1.0000\n","0               \t1.0000\n","calories        \t1.0000\n","                \t1.0000\n","                \t1.0000\n","\n","[QID: q_174]  [Sampling: sampling0]  [Error Step: 2]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Determine       \t0.7121\n","how             \t0.7002\n","many            \t0.9409\n","servings        \t0.8480\n","John            \t1.0000\n","ate             \t1.0000\n",".               \t1.0000\n","                \t1.0000\n","Since           \t1.0000\n","John            \t0.9031\n","ate             \t1.0000\n","half            \t1.0000\n","the             \t1.0000\n","package         \t1.0000\n",",               \t1.0000\n","divide          \t0.2462\n","the             \t1.0000\n","total           \t1.0000\n","calories        \t0.1698\n","(               \t0.8262\n","3               \t1.0000\n","6               \t1.0000\n","0               \t1.0000\n",")               \t1.0000\n","by              \t1.0000\n","the             \t1.0000\n","number          \t0.9682\n","of              \t1.0000\n","servings        \t1.0000\n","in              \t0.7448\n","the             \t1.0000\n","package         \t1.0000\n","(               \t1.0000\n","3               \t1.0000\n",").              \t1.0000\n","                \t1.0000\n","3               \t1.0000\n","6               \t1.0000\n","0               \t1.0000\n","calories        \t1.0000\n","/               \t1.0000\n","                \t1.0000\n","3               \t1.0000\n","servings        \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","1               \t1.0000\n","2               \t1.0000\n","0               \t1.0000\n","calories        \t1.0000\n","                \t1.0000\n","                \t1.0000\n","\n","[QID: q_188]  [Sampling: sampling0]  [Error Step: 1]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Determine       \t0.3283\n","the             \t1.0000\n","number          \t0.7016\n","of              \t1.0000\n","rectangular     \t0.0478\n","tables          \t1.0000\n","needed          \t0.6419\n",".               \t0.2275\n","                \t1.0000\n","Since           \t0.5510\n","there           \t0.1142\n","are             \t1.0000\n","                \t1.0000\n","7               \t1.0000\n","rectangular     \t1.0000\n","tables          \t1.0000\n","and             \t0.7655\n","each            \t0.9106\n","can             \t0.8633\n","seat            \t1.0000\n","                \t1.0000\n","1               \t1.0000\n","0               \t1.0000\n","pupils          \t1.0000\n",",               \t1.0000\n","we              \t0.9675\n","need            \t0.5250\n","to              \t0.9176\n","divide          \t0.3977\n","the             \t1.0000\n","total           \t1.0000\n","number          \t1.0000\n","of              \t1.0000\n","pupils          \t1.0000\n","(               \t0.6859\n","9               \t1.0000\n","0               \t1.0000\n",")               \t1.0000\n","by              \t1.0000\n","the             \t1.0000\n","number          \t0.8721\n","of              \t1.0000\n","pupils          \t1.0000\n","that            \t0.3931\n","can             \t0.9142\n","be              \t0.9241\n","seated          \t1.0000\n","at              \t1.0000\n","one             \t0.0763\n","rectangular     \t1.0000\n","table           \t1.0000\n","(               \t1.0000\n","1               \t1.0000\n","0               \t1.0000\n",").              \t0.8562\n","                \t1.0000\n","9               \t0.1250\n","0               \t1.0000\n","pupils          \t1.0000\n","/               \t0.7275\n","                \t1.0000\n","1               \t1.0000\n","0               \t1.0000\n","pupils          \t1.0000\n","per             \t1.0000\n","rectangular     \t1.0000\n","table           \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","9               \t1.0000\n","rectangular     \t1.0000\n","tables          \t1.0000\n","                \t0.9622\n","                \t1.0000\n","\n","[QID: q_188]  [Sampling: sampling0]  [Error Step: 1]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Determine       \t0.3283\n","the             \t1.0000\n","number          \t0.7016\n","of              \t1.0000\n","rectangular     \t0.0478\n","tables          \t1.0000\n","needed          \t0.6419\n",".               \t0.2275\n","                \t1.0000\n","Since           \t0.5510\n","there           \t0.1142\n","are             \t1.0000\n","                \t1.0000\n","7               \t1.0000\n","rectangular     \t1.0000\n","tables          \t1.0000\n","and             \t0.7655\n","each            \t0.9106\n","can             \t0.8633\n","seat            \t1.0000\n","                \t1.0000\n","1               \t1.0000\n","0               \t1.0000\n","pupils          \t1.0000\n",",               \t1.0000\n","we              \t0.9675\n","need            \t0.5250\n","to              \t0.9176\n","divide          \t0.3977\n","the             \t1.0000\n","total           \t1.0000\n","number          \t1.0000\n","of              \t1.0000\n","pupils          \t1.0000\n","(               \t0.6859\n","9               \t1.0000\n","0               \t1.0000\n",")               \t1.0000\n","by              \t1.0000\n","the             \t1.0000\n","number          \t0.8721\n","of              \t1.0000\n","pupils          \t1.0000\n","that            \t0.3931\n","can             \t0.9142\n","be              \t0.9241\n","seated          \t1.0000\n","at              \t1.0000\n","one             \t0.0763\n","rectangular     \t1.0000\n","table           \t1.0000\n","(               \t1.0000\n","1               \t1.0000\n","0               \t1.0000\n",").              \t0.8562\n","                \t1.0000\n","9               \t0.1250\n","0               \t1.0000\n","pupils          \t1.0000\n","/               \t0.7275\n","                \t1.0000\n","1               \t1.0000\n","0               \t1.0000\n","pupils          \t1.0000\n","per             \t1.0000\n","rectangular     \t1.0000\n","table           \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","9               \t1.0000\n","rectangular     \t1.0000\n","tables          \t1.0000\n","                \t0.9622\n","                \t1.0000\n","\n","[QID: q_188]  [Sampling: sampling0]  [Error Step: 1]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Determine       \t0.3283\n","the             \t1.0000\n","number          \t0.7016\n","of              \t1.0000\n","rectangular     \t0.0478\n","tables          \t1.0000\n","needed          \t0.6419\n",".               \t0.2275\n","                \t1.0000\n","Since           \t0.5510\n","there           \t0.1142\n","are             \t1.0000\n","                \t1.0000\n","7               \t1.0000\n","rectangular     \t1.0000\n","tables          \t1.0000\n","and             \t0.7655\n","each            \t0.9106\n","can             \t0.8633\n","seat            \t1.0000\n","                \t1.0000\n","1               \t1.0000\n","0               \t1.0000\n","pupils          \t1.0000\n",",               \t1.0000\n","we              \t0.9675\n","need            \t0.5250\n","to              \t0.9176\n","divide          \t0.3977\n","the             \t1.0000\n","total           \t1.0000\n","number          \t1.0000\n","of              \t1.0000\n","pupils          \t1.0000\n","(               \t0.6859\n","9               \t1.0000\n","0               \t1.0000\n",")               \t1.0000\n","by              \t1.0000\n","the             \t1.0000\n","number          \t0.8721\n","of              \t1.0000\n","pupils          \t1.0000\n","that            \t0.3931\n","can             \t0.9142\n","be              \t0.9241\n","seated          \t1.0000\n","at              \t1.0000\n","one             \t0.0763\n","rectangular     \t1.0000\n","table           \t1.0000\n","(               \t1.0000\n","1               \t1.0000\n","0               \t1.0000\n",").              \t0.8562\n","                \t1.0000\n","9               \t0.1250\n","0               \t1.0000\n","pupils          \t1.0000\n","/               \t0.7275\n","                \t1.0000\n","1               \t1.0000\n","0               \t1.0000\n","pupils          \t1.0000\n","per             \t1.0000\n","rectangular     \t1.0000\n","table           \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","9               \t1.0000\n","rectangular     \t1.0000\n","tables          \t1.0000\n","                \t0.9622\n","                \t1.0000\n","\n","[QID: q_188]  [Sampling: sampling0]  [Error Step: 1]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","Determine       \t0.3283\n","the             \t1.0000\n","number          \t0.7016\n","of              \t1.0000\n","rectangular     \t0.0478\n","tables          \t1.0000\n","needed          \t0.6419\n",".               \t0.2275\n","                \t1.0000\n","Since           \t0.5510\n","there           \t0.1142\n","are             \t1.0000\n","                \t1.0000\n","7               \t1.0000\n","rectangular     \t1.0000\n","tables          \t1.0000\n","and             \t0.7655\n","each            \t0.9106\n","can             \t0.8633\n","seat            \t1.0000\n","                \t1.0000\n","1               \t1.0000\n","0               \t1.0000\n","pupils          \t1.0000\n",",               \t1.0000\n","we              \t0.9675\n","need            \t0.5250\n","to              \t0.9176\n","divide          \t0.3977\n","the             \t1.0000\n","total           \t1.0000\n","number          \t1.0000\n","of              \t1.0000\n","pupils          \t1.0000\n","(               \t0.6859\n","9               \t1.0000\n","0               \t1.0000\n",")               \t1.0000\n","by              \t1.0000\n","the             \t1.0000\n","number          \t0.8721\n","of              \t1.0000\n","pupils          \t1.0000\n","that            \t0.3931\n","can             \t0.9142\n","be              \t0.9241\n","seated          \t1.0000\n","at              \t1.0000\n","one             \t0.0763\n","rectangular     \t1.0000\n","table           \t1.0000\n","(               \t1.0000\n","1               \t1.0000\n","0               \t1.0000\n",").              \t0.8562\n","                \t1.0000\n","9               \t0.1250\n","0               \t1.0000\n","pupils          \t1.0000\n","/               \t0.7275\n","                \t1.0000\n","1               \t1.0000\n","0               \t1.0000\n","pupils          \t1.0000\n","per             \t1.0000\n","rectangular     \t1.0000\n","table           \t1.0000\n","=               \t1.0000\n","                \t1.0000\n","9               \t1.0000\n","rectangular     \t1.0000\n","tables          \t1.0000\n","                \t0.9622\n","                \t1.0000\n","\n","[QID: q_193]  [Sampling: sampling2]  [Error Step: 5]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","                \t1.0000\n","2               \t0.7849\n","(               \t1.0000\n","Ed              \t0.2614\n","'               \t0.6204\n","s               \t1.0000\n","initial         \t0.9108\n","shells          \t1.0000\n",")               \t1.0000\n","+               \t1.0000\n","                \t1.0000\n","1               \t1.0000\n","5               \t1.0000\n","(               \t1.0000\n","Jacob           \t0.2551\n","'               \t1.0000\n","s               \t1.0000\n","shells          \t1.0000\n",")               \t1.0000\n","=               \t0.6514\n","                \t1.0000\n","1               \t1.0000\n","7               \t1.0000\n","shells          \t1.0000\n",".               \t0.3856\n","                \t1.0000\n","                \t1.0000\n","Answer          \t0.4334\n",":               \t1.0000\n","The             \t0.5666\n","pair            \t1.0000\n","has             \t0.6308\n","                \t0.5666\n","1               \t1.0000\n","7               \t1.0000\n","shells          \t1.0000\n","altogether      \t1.0000\n",".               \t1.0000\n","<｜end▁of▁sentence｜>\t1.0000\n","\n","[QID: q_193]  [Sampling: sampling2]  [Error Step: 5]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","                \t1.0000\n","2               \t0.7849\n","(               \t1.0000\n","Ed              \t0.2614\n","'               \t0.6204\n","s               \t1.0000\n","initial         \t0.9108\n","shells          \t1.0000\n",")               \t1.0000\n","+               \t1.0000\n","                \t1.0000\n","1               \t1.0000\n","5               \t1.0000\n","(               \t1.0000\n","Jacob           \t0.2551\n","'               \t1.0000\n","s               \t1.0000\n","shells          \t1.0000\n",")               \t1.0000\n","=               \t0.6514\n","                \t1.0000\n","1               \t1.0000\n","7               \t1.0000\n","shells          \t1.0000\n",".               \t0.3856\n","                \t1.0000\n","                \t1.0000\n","Answer          \t0.4334\n",":               \t1.0000\n","The             \t0.5666\n","pair            \t1.0000\n","has             \t0.6308\n","                \t0.5666\n","1               \t1.0000\n","7               \t1.0000\n","shells          \t1.0000\n","altogether      \t1.0000\n",".               \t1.0000\n","<｜end▁of▁sentence｜>\t1.0000\n","\n","[QID: q_193]  [Sampling: sampling2]  [Error Step: 5]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","                \t1.0000\n","2               \t0.7849\n","(               \t1.0000\n","Ed              \t0.2614\n","'               \t0.6204\n","s               \t1.0000\n","initial         \t0.9108\n","shells          \t1.0000\n",")               \t1.0000\n","+               \t1.0000\n","                \t1.0000\n","1               \t1.0000\n","5               \t1.0000\n","(               \t1.0000\n","Jacob           \t0.2551\n","'               \t1.0000\n","s               \t1.0000\n","shells          \t1.0000\n",")               \t1.0000\n","=               \t0.6514\n","                \t1.0000\n","1               \t1.0000\n","7               \t1.0000\n","shells          \t1.0000\n",".               \t0.3856\n","                \t1.0000\n","                \t1.0000\n","Answer          \t0.4334\n",":               \t1.0000\n","The             \t0.5666\n","pair            \t1.0000\n","has             \t0.6308\n","                \t0.5666\n","1               \t1.0000\n","7               \t1.0000\n","shells          \t1.0000\n","altogether      \t1.0000\n",".               \t1.0000\n","<｜end▁of▁sentence｜>\t1.0000\n","\n","[QID: q_193]  [Sampling: sampling2]  [Error Step: 5]\n","Token\t\tProb\n","------------------------------\n",":               \t1.0000\n","                \t1.0000\n","2               \t0.7849\n","(               \t1.0000\n","Ed              \t0.2614\n","'               \t0.6204\n","s               \t1.0000\n","initial         \t0.9108\n","shells          \t1.0000\n",")               \t1.0000\n","+               \t1.0000\n","                \t1.0000\n","1               \t1.0000\n","5               \t1.0000\n","(               \t1.0000\n","Jacob           \t0.2551\n","'               \t1.0000\n","s               \t1.0000\n","shells          \t1.0000\n",")               \t1.0000\n","=               \t0.6514\n","                \t1.0000\n","1               \t1.0000\n","7               \t1.0000\n","shells          \t1.0000\n",".               \t0.3856\n","                \t1.0000\n","                \t1.0000\n","Answer          \t0.4334\n",":               \t1.0000\n","The             \t0.5666\n","pair            \t1.0000\n","has             \t0.6308\n","                \t0.5666\n","1               \t1.0000\n","7               \t1.0000\n","shells          \t1.0000\n","altogether      \t1.0000\n",".               \t1.0000\n","<｜end▁of▁sentence｜>\t1.0000\n","[✓] 已输出 token + prob 到: /content/drive/MyDrive/Cluster-proj/output/stat_cluster_results/token_with_prob_error_case_201-600.json\n","[✓] 样本总数: 218\n"]}]}]}